#+title: Adrian Danao-Schroeder config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
* System Setup
** Emacs Directory
   Define the user emacs directory

   #+begin_src emacs-lisp
   (defvar efs/user-dir-emacs 
	(format "c:/Users/%s/Documents/GitHub/emacs/" user-login-name))
    
   #+end_src

   #+RESULTS:
   : efs/user-dir-emacs

** Org Directory
   Define the user org directory

   #+begin_src emacs-lisp
   (defvar efs/user-dir-org 
	(format "c:/Users/%s/Documents/GitHub/org/" user-login-name))
    
   #+end_src

   #+RESULTS:
   : efs/user-dir-org

* Package System Setup
** Package setup 
   #+begin_src emacs-lisp
    ;; Initialize package sources
    (require 'package)
    
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
    (package-refresh-contents))



    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
    (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

   #+end_src

   #+RESULTS:
   : t

** TODO Auto Updates
   
* Basic UI Config
** Basic Config 
 Setting up some basic stuff here

 #+begin_src emacs-lisp

 (setq inhibit-startup-message t)


 (scroll-bar-mode -1)  ;; Disable the visible scrollbar
 (tool-bar-mode -1)    ;; Disablet the toolbar
 (tooltip-mode -1)     ;; Disable tooltips
 (set-fringe-mode 10)  ;; Add some breathing room


 (menu-bar-mode -1) ; Disable the menu bar

 (setq visible-bell t) ; set up the visible bell (no annoying beeping sounds)

 #+end_src

 #+RESULTS:
 : t

** Font configuration

Setting up fonts and stuff, I'm not sure how I feel about Cantarell

#+begin_src emacs-lisp

 ;; Set Font sizesb
 (defvar efs/default-font-size 140)
 (defvar efs/default-variable-font-size 140)

;; Set default font
(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the variable pitch fa
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)


#+end_src

#+RESULTS:

** Line Numbers 
   #+begin_src emacs-lisp
   ;; Enable line numbers
   (global-display-line-numbers-mode t)

   ;; Disable lines in some modes 
   (dolist (mode '(org-mode-hook
	       term-mode-hook
	       eshell-mode-hook))
	   (add-hook mode(lambda () (display-line-numbers-mode 0))))

   #+end_src

** Column Numbers

   #+begin_src emacs-lisp
   ;; Enable column number
 (column-number-mode)

   #+end_src
   
** Rainbow Delimiters

   #+begin_src emacs-lisp
(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** Restore session

#+begin_src emacs-lisp
(desktop-save-mode 1)
;(savehist-mode 1)
;(add-to-list 'savehist-additional-variables 'kill-ring) ;; for example
#+end_src

* Keybinding Congif
** Global Esc
   #+begin_src emacs-lisp
   ;;Make ESC quit prompts (why wouldn't you want that?)
   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src

** General Leader Keys

https://lccambiaghi.github.io/vanilla-emacs/readme.html#org9191e9f


   #+begin_src emacs-lisp
 
   (use-package general
   :after evil
   :config
   (general-create-definer efs/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
    (efs/leader-keys
      "t" '(:ignore t :wk "toggles") 
      "k" '(:ignore t :wk "kill")
      "e" '(:ignore t :which-key "eval")
      "j" '(:ignore t :which-key "org")
      
      "ec" '(lambda () (interactive) (
	    find-file (concat efs/user-dir-emacs "readme.org"))
	    :which-key "ORG Config")
      
      "ei" '(lambda () (interactive) (
	    find-file (concat efs/user-dir-emacs "init.el"))
	    :which-key "ORG init")
	    
      "eb" '(eval-buffer :which-key "eval-buffer")
      "ep" '(eval-last-sexp :which-key "eval-last-sexp")
      "eo" '(org-mode-restart :which-key "org-mode-restart")


      ;"SPC"  '(normal-mode :which-key "normal-mode")


      "kw" '(kill-buffer-and-window :which-key "kill-buffer-and-window")
      "kk" '(kill-this-buffer :which-key "kill-this-buffer")

  
      ;"jk" '(org-capture :which-key "org-capture")

      "h" '(:ignore t :which-key "describe")
      "he" 'view-echo-area-messages
      "hf" 'describe-function
      "hF" 'describe-face
      "hk" 'describe-key
      "hK" 'describe-keymap
      "hp" 'describe-package
      "hv" 'describe-variable
      ))
  
   #+end_src

   #+RESULTS:
   : t

** Evil 

   #+begin_src emacs-lisp
   
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
    
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

   #+end_src

   #+RESULTS:
   : t
   
** Undo-fu
   Simple linear undo with emacs, nothin super fancy [[https://github.com/emacsmirror/undo-fu][Undo-Fu]]

   Checkout [[https://gitlab.com/ideasman42/emacs-undo-fu-session][Undo fu sessions]] for saving of redo-undo functionality across sessions
   #+begin_src emacs-lisp
   (use-package undo-fu
	:config
	(global-undo-tree-mode -1)
	(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
	(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo))
   #+end_src

   #+RESULTS:
   : t

* UI Config 
** Color Theme
 #+begin_src emacs-lisp
(use-package doom-themes
    :init (load-theme 'doom-acario-dark t))

 #+end_src

   #+RESULTS:
** Toggle Theme

Toggle between themes, bound to SCP-tt

#+begin_src emacs-lisp
(defvar efs/switch-themes-var
  (let ((themes-list (list 
			    'doom-acario-dark
			    'doom-solarized-light
)))
    (nconc themes-list themes-list))
  "A circular list of themes to keep switching between.
  Make sure that the currently enabled theme is at the head of this
  list always.

  A nil value implies no custom theme should be enabled.")

(defun efs/quick-switch-theme ()
  "Switch between to commonly used faces in Emacs.
One for writing code and the other for reading articles."
  (interactive)
  (if-let* ((next-theme (cadr efs/switch-themes-var)))
      (progn (when-let* ((current-theme (car efs/switch-themes-var)))
               (disable-theme (car efs/switch-themes-var)))
             (load-theme next-theme t)
             (message "Loaded theme: %s" next-theme))
    ;; Always have the dark mode-line theme
    (mapc #'disable-theme (delq 'smart-mode-line-dark custom-enabled-themes)))
  (setq efs/switch-themes-var (cdr efs/switch-themes-var)))


(efs/leader-keys
    "tt" '(efs/quick-switch-theme :wk "toggle theme"))

#+end_src

#+RESULTS:

** Doom Modeline

   #+begin_src emacs-lisp
   
   (use-package all-the-icons)

   ;; Doom modeline config
   (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1)
   )


   #+end_src

** Which key

   #+begin_src emacs-lisp
   
   (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))


   #+end_src

** Counsel

   #+begin_src emacs-lisp
   (use-package counsel
     :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
     :custom
     (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
     :config
     (counsel-mode 1))

   #+end_src

** Ivy

   #+begin_src emacs-lisp
  
   (use-package ivy
    :diminish ;; Hides from the mode line
    :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

   
   (use-package ivy-rich
     :after ivy
     :init
     (ivy-rich-mode 1))


   #+end_src

** Ivy Prescient

 Still not working ¯\_(ツ)_/¯ not sure why though, saying Ivy Prescient is not on melpa

   #+begin_src emacs-lisp
;    (use-package ivy-prescient
;      :after counsel
;      :custom
;      (ivy-prescient-enable-filtering nil)
;      :config
      ;; Uncomment the following line to have sorting remembered across sessions!
;      (prescient-persist-mode 1)
;      (ivy-prescient-mode 1))
    #+end_src

    #+RESULTS:
    : t

** Helpful 

   #+begin_src emacs-lisp
 
   (use-package helpful
     :ensure t
     :commands (helpful-callable helpful-variable helpful-command helpful-key)
     :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
     :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))

  
   #+end_src

** Text Scaling

   #+begin_src emacs-lisp
 
   (use-package hydra
    :defer t)

   (defhydra hydra-text-scale (:timeout 4)
     "scale text"
     ("j" text-scale-increase "in")
     ("k" text-scale-decrease "out")
     ("f" nil "finished" :exit t))


   (efs/leader-keys
     "ts" '(hydra-text-scale/body :which-key "scale text"))

   #+end_src

   #+RESULTS:

** Smart Parens
[[https://github.com/Fuco1/smartparens/tree/fb1ce4b4013fe6f86dde9dd5bd5d4c032ab0d45b][Smartparens Github]]
[[https://github.com/expez/evil-smartparens][Evil Smartparens]]

#+begin_src emacs-lisp
(use-package evil-smartparens)

(use-package smartparens-config
  :ensure smartparens
  :config (progn (show-smartparens-global-mode t)))
(require 'smartparens-config)

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
;(show-paren-mode t)
#+end_src

#+RESULTS:
: t

* Org Mode
** EFS Org Font Faces

   #+begin_src emacs-lisp
   
(defun efs/org-font-setup ()
    ;; Replace list hyphen with dots
    (font-lock-add-keywords 'org-mode
        '(("^ *\\([-]\\) "
            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist 
        (face '((org-level-1 . 1.2)
            (org-level-2 . 1.1)
            (org-level-3 . 1.05)
            (org-level-4 . 1.0)
            (org-level-5 . 1.0)
            (org-level-6 . 1.0)
            (org-level-7 . 1.0)
            (org-level-8 . 1.0)))
        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
	  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))


   #+end_src

   #+RESULTS:
   : efs/org-font-setup

** EFS Org Mode Setup

   #+begin_src emacs-lisp
   
(defun efs/org-mode-setup ()
    (org-indent-mode t)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

   #+end_src

   #+RESULTS:
   : efs/org-mode-setup

** General

Some general org config stuff, may be worth cleaning up at some point and splitting up all of this into different headings
   #+begin_src emacs-lisp
   (use-package org
	:config
	 (setq org-ellipsis " ▾")

	(setq org-agenda-start-with-log-mode t)
	(setq org-log-done 'time)
	(setq org-log-into-drawer t)


	(setq org-hide-emphasis-markers t)

	(setq org-agenda-files
	      '(
		   (concat efs/user-dir-org "work.org")
		   (concat efs/user-dir-org "personal.org")
		   (concat efs/user-dir-org "habits.org")
		   (concat efs/user-dir-org "dates.org")
		   (concat efs/user-dir-org "inbox.org")
		))

	;:hook (org-mode . efs/org-mode-setup)
	(require 'org-habit)
	(add-to-list 'org-modules 'org-habit)
	(setq org-habit-graph-column 60)

	(setq org-todo-keywords
	  '((sequence "TODO(t)" "PROGRESS(p)" "|" "DONE(d!)")
	    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

	(setq org-refile-targets
	  '(("archive.org" :maxlevel . 1)
	    ("personal.org" :maxlevel . 1)
	    ("work.org" :maxlevel . 1)))

	;; Save Org buffers after refiling!
	(advice-add 'org-refile :after 'org-save-all-org-buffers)

	(setq org-tag-alist
	  '((:startgroup)
	     ; Put mutually exclusive tags here
	     (:endgroup)
	     ("@errand" . ?E)
	     ("@home" . ?H)
	     ("@work" . ?W)
	     ("agenda" . ?a)
	     ("planning" . ?p)
	     ("publish" . ?P)
	     ("batch" . ?b)
	     ("note" . ?n)
	     ("idea" . ?i)))


;;	(efs/org-font-setup)
	(org-indent-mode t)
	(variable-pitch-mode 1)
	(visual-line-mode 1)

	(efs/org-font-setup))


   #+end_src

   #+RESULTS:
   : t
** Keybindings 
   
    #+begin_src emacs-lisp
(efs/leader-keys
    "o" '(:ignore t :wk "org")
    "oc" '(org-capture :wk "capture")
    "oj" '(org-store-link :wk "org-store-link")
    "oi" '(org-insert-last-stored-link :wk "org-insert-last-stored-link")
)
    #+end_src

    #+RESULTS:

** Org Capture Templates 
    
#+begin_src emacs-lisp
(setq org-capture-templates
   '( 
    ("t" "Task" entry 
	(file+headline (lambda () (concat efs/user-dir-org "inbox.org"))"Inbox")
"* TODO %^{Task}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a
%i
:END:
"
  :kill-buffer t)
    ("w" "Work Task" entry 
	(file+headline (lambda () (concat efs/user-dir-org "work.org"))"Tasks")
"* TODO %^{Work Task}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a
%i
:END:
"
  :kill-buffer t)

    ("p" "Personal Task" entry 
	(file+headline (lambda () (concat efs/user-dir-org "personal.org"))"Tasks")
"* TODO %^{Personal Task}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a
%i
:END:
"
  :kill-buffer t)




    ("i" "Quick Inbox" entry 
	(file+headline (lambda () (concat efs/user-dir-org "inbox.org"))"Inbox")
"* TODO %^{Task to inbox}\n
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a
%i
:END:
"
  :immediate-finish t
  :kill-buffer t)



    ("k" "Clipboard Link to Inbox" entry 
	(file+headline (lambda () (concat efs/user-dir-org "inbox.org"))"Inbox")
"* TODO %(org-cliplink-capture)\n
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a
%i
:END:
"
  :immediate-finish t
  :kill-buffer t)


    ("m" "CAD Model" entry 
	(file+headline (lambda () (concat efs/user-dir-org "personal.org"))"CAD")
"* TODO %^{Thing to CAD}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
:END:
"
  :kill-buffer t)
    ("P" "Project" entry 
	(file+headline (lambda () (concat efs/user-dir-org "personal.org"))"Projects")
"* TODO %^{Project Name}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U
:REF:\t%a 
:Effort: \t%^{effort|1:00|2:00|4:00|8:00|16:00}
:Cost-est:\t%^{Cost estimate}
%i
:END:
  "
  :kill-buffer t)
    ("B" "Book" entry 
	(file+headline (lambda () (concat efs/user-dir-org "books.org"))"Endless Pile")
"* PILE %^{Book Title}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U 
:AUTHOR:
:RECCOMMENDER:
:END:
  "
  :kill-buffer t)
    ("c" "config" entry 
	(file+headline (lambda () (concat efs/user-dir-org "personal.org"))"EMACS")
"* TODO %^{Config changes}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U 
:END:
  "
  :kill-buffer t)
    ("p" "Purchase" entry 
	(file+headline (lambda () (concat efs/user-dir-org "personal.org" ))"Purchase")
"* TODO %^{What the fuck do you want now?}\n
%?
:PROPERTIES:
:ID:     \t%(org-id-new)
:CREATED:\t%U 
:Cost:\t%^{Cost}
:END:
  "
  :kill-buffer t)





))

#+end_src
    #+RESULTS:
    | t | Task | entry | (file+headline (lambda nil (concat efs/user-dir-org inbox.org)) Inbox) | * TODO %^{Task} |

** Org Agenda

#+begin_src emacs-lisp
 
;; Configure custom agenda views
(setq org-agenda-custom-commands
	 '(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "NEXT"
	      ((org-agenda-overriding-header "Next Tasks")))
	    (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	  ("n" "Next Tasks"
	   ((todo "NEXT"
	      ((org-agenda-overriding-header "Next Tasks")))))

	  ("W" "Work Tasks" tags-todo "+work-email")

	  ;; Low-effort next actions
	  ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	   ((org-agenda-overriding-header "Low Effort Tasks")
	    (org-agenda-max-todos 20)
	    (org-agenda-files org-agenda-files)))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting on External")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "PLAN"
		  ((org-agenda-overriding-header "In Planning")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "READY"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "ACTIVE"
		  ((org-agenda-overriding-header "Active Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "COMPLETED"
		  ((org-agenda-overriding-header "Completed Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "CANC"
		  ((org-agenda-overriding-header "Cancelled Projects")
		   (org-agenda-files org-agenda-files)))))))

  
#+end_src

** Org Bullets

   #+begin_src emacs-lisp

   (use-package org-bullets
	  :after org
	  :hook (org-mode . org-bullets-mode)
	  :custom
	  (org-bullets-bullet-lits '(("◉" "○" "●" "○" "●" "○" "●"))))


   #+end_src

   #+RESULTS:
   | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | efs/org-mode-visual-fill | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (display-line-numbers-mode 0)) |

** Org Visual fill

   #+begin_src emacs-lisp


   (defun efs/org-mode-visual-fill ()
	(setq visual-fill-column-width 100
	    visual-fill-column-center-text t)
	(visual-fill-column-mode 1))


    (use-package visual-fill-column
	:hook (org-mode . efs/org-mode-visual-fill))

 
   #+end_src

   #+RESULTS:
   | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-tempo-setup | efs/org-mode-visual-fill | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (display-line-numbers-mode 0)) |

** Babel Languages 
   
   #+begin_src emacs-lisp
   (with-eval-after-load 'org
     (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t))))

    (setq org-confirm-babel-evaluate nil)

   #+end_src

** Org Structure Templates
   #+begin_src emacs-lisp
   
    (with-eval-after-load 'org
  ;; This is needed as of Org 9.2
	(require 'org-tempo)

	(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	(add-to-list 'org-structure-template-alist '("py" . "src python")))
  
   #+end_src

** Evil Org 
Maybe this will be better somewhere else but it works here for now
[[https://github.com/Somelauw/evil-org-mode/tree/80ef38fb378541937f6ddfe836809e76eda1e355][Evil Org Github]]

#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

#+RESULTS:
| (lambda nil evil-org-mode) | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | efs/org-mode-visual-fill | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (display-line-numbers-mode 0)) |

** Org Cliplink 
[[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
   #+begin_src emacs-lisp
(use-package org-cliplink)
(efs/leader-keys
    "ok" '(org-cliplink :wk "org-cliplink")
)

   #+end_src

** Org Download

;#+begin_src emacs-lisp

(use-package org-download
    :init
    (setq org-download-screenshot-method '"imagemagick/convert")
    (setq-default org-download-image-dir ((lambda () (concat efs/user-dir-org "images/"))))

)
;(setq-default org-download-image-dir ((lambda () (concat efs/user-dir-org "images/"))))
;;(setq org-download-screenshot-method '"imagemagick/convert")
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** Auto tangle Config Files
 

 #+begin_src emacs-lisp

 (defun efs/org-babel-tangle-config ()
   (when (string-equal (file-name-directory (buffer-file-name))
                     (expand-file-name "c:/Users/Adrian/Documents/GitHub/emacs/"))

     ;; Dynamic scoping to the rescue
     (let ((org-confirm-babel-evaluate nil))
       (org-babel-tangle))))

 (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+end_src

 #+RESULTS:
 | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | efs/org-mode-visual-fill | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (display-line-numbers-mode 0)) |

* Development 
** Languages

** Projectile

#+begin_src emacs-lisp
(use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "c:/Users/Adrian/Documents/GitHub/") 
	;; Specify folder where you keep your coding projects
	    (setq projectile-project-search-path '("c:/Users/Adrian/Documents/GitHub/")))
	(setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
	:after projectile
	:config (counsel-projectile-mode))

#+end_src

   #+RESULTS:
   : t

** Magit

test commit
huh checkout if evil magit exists somewhere
Ooof this is just going to be painful and super slow as long as I'm on windows

#+begin_src emacs-lisp
 
(use-package magit
  :commands magit-status
  ;; display the diff from git in the same window (may be worth trying different options as well 
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))


;(use-package evil-magit
;   :after magit)
  
#+end_src


#+RESULTS:

* File Management
** Dired Bindings
*** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** 

** Dired
#+begin_src emacs-lisp

  (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first"))
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
	"h" 'dired-single-up-directory
	"l" 'dired-single-buffer)

       (setq delete-by-moving-to-trash t)
       (setq-default dired-hide-details-mode t))

  (use-package dired-single
      :commands (dired dired-jump))

  (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

  ;(use-package dired-open
  ;    :commands (dired dired-jump)
  ;    :config
  ;    ;; Doesn't work as expected!
  ;    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  ;    (setq dired-open-extensions '(("pdf" . "feh")
				   ;; ("mkv" . "mpv"))))

#+end_src

#+RESULTS:
| dired-extra-startup | org-download-enable | all-the-icons-dired-mode | doom-modeline-set-project-modeline |
