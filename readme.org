#+TITLE: Emacs Literate Configuration
This configuration tangles out to multiple individual files using
~org-babel-tangle~ on save of this file.

To create the init files:
#+begin_src shell
emacs --batch -l org readme.org -f org-babel-tangle
#+end_src

[[Windows]] specific configuration settings are saved to ~windows.el~ and loaded on
the appropriate machines

The following projects and configurations have provided a source of inspiration
for my setup:
- [[https://github.com/SystemCrafters/crafted-emacs][Crafted Emacs]]
- [[https://github.com/rougier][Nicolas Rougier]] particularly [[https://github.com/rougier/nano-emacs?tab=readme-ov-file][NANO]] though everything he touches is gold
- [[https://github.com/minad/org-modern][Org Modern]]
- Progfolio's [[https://github.com/progfolio/.emacs.d/tree/master][.emacs.d]]

* early-init
:PROPERTIES:
:header-args: emacs-lisp :tangle early-init.el :results none :noweb yes :comments link
:ID:       a70010ba-7c49-4804-afef-c818bc0225ec
:END:

Enable debug on error at startup to automatically get debugging with init.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(setq debug-on-error t)
(add-hook 'after-init-hook '(lambda () (setq debug-on-error nil)))
#+end_src

** Set directory variables
:PROPERTIES:
:ID:       3190cd0f-37bc-476e-a322-dccf9af20846
:END:

The EMACS ~~~ directory is not the same on windows as it is on Linux, I keep my git directory on
windows at ~c:/users/username/git~.  Windows behaviour can sometimes be strange, and to avoid
unecessary headaches I avoid manually setting the emacs home directory.

#+begin_src emacs-lisp
(setq git-directory (expand-file-name "~/git/"))
#+end_src

I keep my org directory in the same place

#+begin_src emacs-lisp
(setq org-directory (concat git-directory "org/"))
#+end_src

my emacs config also lives in the same place on all my machines
#+begin_src emacs-lisp
(setq ads/config-file (concat git-directory "emacs/readme.org"))
#+end_src
** Garbage Collection
:PROPERTIES:
:ID:       ecc6265b-6f3e-4637-8d8c-5f91724e9db7
:END:
(lifted from [[https://github.com/progfolio/.emacs.d?tab=readme-ov-file#garbage-collection][progfolio's init]])

=gc-cons-threshold= (800 KB) and =gc-cons-percentage= (0.1) control when the Emacs garbage collector can kick in.
Temporarily turning these off during init should decrease startup time.
Resetting them afterward will ensure that normal operations don't suffer from a large GC periods.

The following is a table shows values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 1)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp
(defun +reset-init-values ()
  (run-with-idle-timer
   1 nil
   (lambda ()
     (setq ;;file-name-handler-alist default-file-name-handler-alist
           gc-cons-percentage 0.1
           gc-cons-threshold 100000000)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

(add-hook 'after-init-hook '+reset-init-values)
#+end_src

** UI Changes
:PROPERTIES:
:ID:       9c4cb38a-f09c-4e67-9b73-a58bdc8d69bc
:END:

Changes to the UI to inhibit unused elements be used should speed up start up times by a bit
#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

(scroll-bar-mode -1)                    ;; Disable the visible scrollbar
(tool-bar-mode -1)                      ;; Disablet the toolbar
(tooltip-mode -1)                       ;; Disable tooltips
(menu-bar-mode -1)                      ;; Disable the menu bar

(setq inhibit-startup-screen t)
#+end_src

Remove server instruction clients, on closing an emacs frame when emacs server is running
#+begin_src emacs-lisp
(setq server-client-instructions nil)
#+end_src

Implicitly resizing the Emacs frame adds to init time. Fonts larger than the system default can cause frame resizing, which adds to startup time.
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src

Silence the bell
#+begin_src emacs-lisp
(setq ring-bell-function #'ignore
      inhibit-startup-screen t)
#+end_src


** Package Usage
:PROPERTIES:
:ID:       d42c037e-17f1-44bb-a1f1-15eeece7ce47
:END:
On corporate machines I've been unable to get elpaca/straight working, for linux I plan to use the Nix [[https://github.com/nix-community/emacs-overlay][emacs-overlay]]

#+begin_src emacs-lisp
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu"  . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(setq use-package-always-ensure t)
(when (string= system-type 'gnu/linux)
  (setq use-package-always-demand t))
#+end_src
** Backup files
Set these so emacs doesn't litter files everywhere.  At some point I might check
out [[https://github.com/emacscollective/no-littering][no-littering]] but this works for now
#+begin_src emacs-li
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setq projectile-known-projects-file (expand-file-name "tmp/projectile-bookmarks.eld" user-emacs-directory)
      lsp-session-file (expand-file-name "tmp/.lsp-session-v1" user-emacs-directory))
#+end_src
** Provide Early init
:PROPERTIES:
:ID:       c919ae21-a56c-48f5-9e46-c6e32459ce46
:END:

#+begin_src emacs-lisp
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Emacs Settings
:PROPERTIES:
:ID:       0aff3214-fa20-4b4b-a126-71dabcf68edb
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:

#+begin_src emacs-lisp
(set-background-color "#000000") ;; don't blind me at startup
(setq
 cursor-in-non-selected-windows nil
 large-file-warning-threshold 100000000 ;; 100Mb
 help-window-select t)

(blink-cursor-mode 0)
(fset 'yes-or-no-p 'y-or-n-p)           ;; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ;; Iterate through CamelCase words
(put 'downcase-region 'disabled nil)    ;; Enable downcase-region
(put 'upcase-region 'disabled nil)      ;; Enable upcase-region

(setq custom-file (concat user-emacs-directory "custom.el"))

(when (file-exists-p custom-file)
  (load custom-file nil t))
#+end_src

#+begin_src emacs-lisp
(setq delete-trailing-lines nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

I want to have line numbers whenever I'm in programming modes
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook '(lambda () (display-line-numbers-mode 1)))
#+end_src
** auto tangle files
:PROPERTIES:
:ID:       cd29ca1d-9409-4477-ae77-225975cc8ed3
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:

Automatically tangle my configuration files on save.

#+begin_src emacs-lisp
(setq org-babel-auto-tangle-file-list
      (list ads/config-file))
#+end_src

#+begin_src emacs-lisp
(defun org-babel-auto-tangle-files ()
  ;; Automatically tangle files in ~org-babel-auto-tangle-file-list~ when one of them is saved
  (when (member buffer-file-name org-babel-auto-tangle-file-list)
    (org-babel-tangle-file buffer-file-name)))
#+end_src

Add hook to after save hook when on org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda () (add-hook 'after-save-hook 'org-babel-auto-tangle-files)))
#+end_src

* Theme
:PROPERTIES:
:ID:       402191ad-8c44-4671-a645-325322eecff4
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:
** fonts
:PROPERTIES:
:ID:       6546ad25-1737-4c16-a2d6-13de6b120226
:END:
#+begin_src emacs-lisp
(setq
 mono "FiraCode Nerd Font"
 sans "Cantarell"
 serif "EtBembo")

;; Set Font sizes
(defvar default-font-size 140)

;; Set default font
(set-face-attribute 'default nil
		    :font mono
		    :family mono
		    :height default-font-size)

(set-face-attribute 'fixed-pitch nil
		    :font mono
		    :family mono
		    :height default-font-size)

(set-face-attribute 'variable-pitch nil
		    :font serif
		    :family serif
		    :height 1.1
		    :weight 'regular)

(customize-set-variable 'line-spacing 0.25)
#+end_src

** frames
:PROPERTIES:
:ID:       1ef9c8c4-0e3a-4b62-bbff-0b4fe37ba750
:END:

Set frame padding to have some breathing room, making the dividers invisible is done with ~ads/modus-tweaks~
#+begin_src emacs-lisp
(modify-all-frames-parameters
   `((right-divider-width . 20)
     (internal-border-width . 20)))
#+end_src

** modus-themes
:PROPERTIES:
:ID:       85514d94-c0ee-4f09-8198-1b673a363a33
:END:
I used to maintain my own theme, but I wanted a change and modus themes are nice looking, I
particularly like the light ~modus-operandi~ theme.

#+begin_src emacs-lisp
(use-package modus-themes
  :custom
  (modus-themes-mixed-fonts t)
  (modus-themes-bold-constructs t))

(setq modus-themes-headings
  '((0 . (regular 2.00))
    (1 . (regular 1.35))
    (2 . (regular 1.30))
    (3 . (regular 1.25))
    (4 . (regular 1.20))
    (5 . (regular 1.15))
    (t . (regular 1.10))
    ))

(setq modus-operandi-palette-overrides
    '((bg-mode-line-active bg-dim)
      (bg-mode-line-inactive bg-main)))

(setq modus-vivendi-palette-overrides
      '((bg-mode-line-active bg-dim)
	(bg-mode-line-inactive bg-main)))

(setq modus-themes-common-palette-overrides
  '((bg-prose-block-contents bg-main)
    (bg-prose-block-delimiter bg-main)
    (fg-heading-0 fg-main)
    (fg-heading-1 fg-main)
    (fg-heading-2 fg-main)
    (fg-heading-3 fg-main)
    (fg-heading-4 fg-main)
    (fg-heading-5 fg-main)
    (fg-heading-6 fg-main)
    (fg-heading-7 fg-main)
    (fg-heading-8 fg-main)))
#+end_src

*** modus-tweaks
#+begin_src emacs-lisp
(defun ads/modus-tweaks ()
  (modus-themes-with-colors
    (custom-set-faces
     ;; cursor
     `(cursor ((t :background ,red-intense)))
     ;; Make frame dividers invisible
     `(fringe ((t :background ,bg-main :foreground ,bg-main)))
     `(window-divider ((t :background ,bg-main :foreground ,bg-main)))
     `(window-divider-first-pixel ((t :background ,bg-main :foreground ,bg-main)))
     `(window-divider-last-pixel ((t :background ,bg-main :foreground ,bg-main)))
     ;; line numbers
     `(line-number ((,c :background ,bg-main :height 0.8)))
     `(line-number-current-line ((,c :background ,bg-main)))
     ;; org mode
     `(modus-themes-prose-verbatim ((,c :foreground nil)))
     `(prose-done ((,c :foreground ,fg-dim)))
     `(org-done ((,c :foreground ,fg-dim)))
     `(org-ellipsis ((,c :inherit org-hide)))
     `(org-modern-label ((,c :height 0.7 :inherit fixed-pitch)))
     ;; markdown mode
     `(markdown-code-face ((,c :background ,bg-main)))
     ;; Add "padding" to the mode lines
     `(mode-line ((,c :box (:line-width 3 :color ,bg-mode-line-active))))
     `(mode-line-inactive ((,c :box (:line-width 3 :color ,bg-mode-line-inactive)))))))
#+end_src

#+begin_src emacs-lisp
(add-hook 'modus-themes-after-load-theme-hook 'ads/modus-tweaks)
(add-hook 'after-init-hook 'ads/modus-tweaks)
(load-theme 'modus-vivendi)
#+end_src

* General.el
:PROPERTIES:
:ID:       d25d57ce-fc06-4526-9707-b7ebccd9a7e6
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:

[[https://github.com/noctuid/general.el#about][general.el]] provides a more convenient method for binding keys in emacs. I use it to set all of my
key bindings

#+begin_src emacs-lisp :lexical t
(use-package general
  :demand t
  :ensure t
  :config
  (general-override-mode)
  (general-auto-unbind-keys))
#+end_src

#+begin_src emacs-lisp :lexical t
(general-define-key
 :keymaps 'override
 :states '(insert normal hybrid motion visual operator emacs)
 :prefix "SPC"
 :global-prefix "C-SPC")

(general-create-definer ads/leader-keys
  :keymaps 'override
  :states '(insert normal hybrid motion visual operator)
  :wk-full-keys nil
  :prefix "SPC"
  :global-prefix "C-SPC")
#+end_src

#+begin_src emacs-lisp :lexical t
(defun ads/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(general-define-key
 :states '(normal hybrid motion visual operator emacs)
 '"C-g" 'ads/keyboard-quit-dwim)
#+end_src

** eval ~e~
:PROPERTIES:
:ID:       d0130836-0a5e-459d-b066-e9507c58e947
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "e" '(:ignore t :which-key "eval")
  "eb" 'eval-buffer
  "ed" 'eval-defun
  "ee" 'eval-expression
  "ep" 'pp-eval-last-sexp
  "es" 'eval-last-sexp
  )
#+end_src

** quit ~q~
:PROPERTIES:
:ID:       982cc7d7-252b-4953-82e1-a62a2468eced
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "q" '(:ignore t :which-key "quit")
  "qQ" 'save-buffers-kill-emacs
  "qE" 'kill-emacs
  )
#+end_src

** narrow ~n~
:PROPERTIES:
:ID:       5688c1b1-21e6-4f74-b4dd-a95cb23fcc5a
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "n" '(:ignore t :which-key "narrow")
  "nd" 'narrow-to-defun
  "np" 'narrow-to-page
  "nr" 'narrow-to-region
  "ns" 'org-narrow-to-subtree
  "ne" 'org-narrow-to-element
  "nb" 'org-narrow-to-block
  "nw" 'widen
  )
#+end_src

** windows, buffers, frames ~j~
:PROPERTIES:
:ID:       f3e626e0-21a7-4e18-8c9a-414a56ba67e2
:END:
#+begin_src emacs-lisp
(ads/leader-keys
  "j" '(:ignore t :which-key "frames")

  "jQ" 'delete-frame
  "jN" 'tear-off-window
  "jR" 'set-frame-name
  "jr" 'select-frame-by-name

  "j=" 'balance-windows
  "j_" 'split-window-vertically

  "jh" 'evil-window-left
  "jj" 'evil-window-down
  "jk" 'evil-window-up
  "jl" 'evil-window-right

  "jH" 'evil-window-move-far-left
  "jJ" 'evil-window-move-very-bottom
  "jK" 'evil-window-move-very-top
  "jL" 'evil-window-move-far-right
  )
#+end_src
** kill ~k~
:PROPERTIES:
:ID:       8647cae1-fd22-43ec-ace7-e5f2ad3f0419
:END:

#+begin_src emacs-lisp
(ads/leader-keys
   "k" '(:ignore t :wk "kill")
   "kj" '(kill-buffer-and-window :which-key "kill-buffer-and-window")
   "kk" '(kill-this-buffer :which-key "kill-this-buffer")
   "kl"'(delete-window :wk "delete-window")
  )
#+end_src

** config ~c~
:PROPERTIES:
:ID:       5e426a49-7743-40e0-a9b2-132889805206
:END:


#+begin_src emacs-lisp
(ads/leader-keys
  "c" '(:ignore t :which-key "config")
  "cc" '((lambda () (interactive) (find-file ads/config-file))
	 :which-key "open config")
  "cI" '((lambda () (interactive) (load-file user-init-file))
	 :which-key "load init"))
#+end_src

** Toggles ~t~
:PROPERTIES:
:ID:       14e88ab3-068e-48b0-b6f7-2edfd3e02491
:END:

#+begin_src emacs-lisp
(ads/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt" 'modus-themes-toggle
    "tl" 'toggle-truncate-lines)
#+end_src


** TODO Regex
:PROPERTIES:
:ID:       658c2bb2-c940-4462-a419-fa1f42c942c0
:END:
* Packages
:PROPERTIES:
:ID:       b211eefc-821f-4ac5-9944-8625a31d6448
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:
** async
#+begin_src emacs-lisp
(use-package async
  :config
  (async-bytecomp-package-mode 1))
#+end_src
** auto-fill
#+begin_src emacs-lisp
(customize-set-variable 'fill-column 80)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
** auto-revert

#+begin_src emacs-lisp
(use-package autorevert
  :custom
  (auto-revert-interval 0.01 "Instantaneously revert")
  :config
  (global-auto-revert-mode t))
#+end_src
** bookmark+
:PROPERTIES:
:ID:       6298ee0c-0bd9-41c3-88bb-d9d0159c14b7
:END:
[[https://www.emacswiki.org/emacs/BookmarkPlus][BookmarkPlus]] [[[https://github.com/emacsmirror/bookmark-plus][git]]] adds a lot of useful functionality to bookmarks, hosted on the EMACS wiki and not
on MELPA

#+begin_src emacs-lisp
(use-package bookmark+
  :vc (:url "https://github.com/emacsmirror/bookmark-plus"
       :branch "master"))
(ads/leader-keys
  "b" '(:ignore t :which-key "bookmark")
  "bb" 'consult-bookmark
  "bs" 'bookmark-set
  "br" 'bookmark-rename)
#+end_src
** cape
[[https://github.com/minad/cape][CAPE]] (Completion At Point Extensions)

#+begin_src emacs-lisp
(use-package cape
  :bind ("M-p" . cape-prefix-map)
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src
** consult
:PROPERTIES:
:ID:       839a64ba-d135-425e-b370-7e25307f438d
:END:

[[https://github.com/minad/consult][Consult]] has quickly become one of my favorite emacs packages, it makes moving around emacs feel like magic

#+begin_src emacs-lisp
(use-package consult
  :demand t
  :config
  (general-define-key
   :states '(normal hybrid motion visual operator emacs)
   '"M-y" 'consult-yank-pop
   '"C-s" 'consult-line))
(ads/leader-keys
  "C-SPC" 'consult-buffer
  "SPC" 'consult-buffer
  "C-j" 'consult-register
  "C-;" 'consult-register-store
  "r" 'consult-recent-file
  "C-b" 'consult-bookmark)
#+end_src

** corfu
:PROPERTIES:
:ID:       76b6e030-10b4-45c6-b76f-433cd2b2aa6b
:END:

   #+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :hook (after-init . global-corfu-mode)
  :bind (:map corfu-map ("<tab>" . corfu-complete))
  :config
  (setq tab-always-indent 'complete)
  (setq corfu-preview-current nil)
  (setq corfu-min-width 20)

  (setq corfu-popupinfo-delay '(1.25 . 0.5))
  (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

  ;; Sort by input history (no need to modify `corfu-sort-function').
  (with-eval-after-load 'savehist
    (corfu-history-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)))
   #+end_src

** Dired

#+begin_src emacs-lisp
(require 'dired)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(setq dired-kill-when-opening-new-dired-buffer t
      delete-by-moving-to-trash t)
(general-define-key
 :states '(normal motion emacs)
 :keymaps 'dired-mode-map
 "h" 'dired-up-directory
 "l" 'dired-find-file)
#+end_src

** display-time-mode
#+begin_src emacs-lisp
(setq display-time-24hr-format t
      display-time-day-and-date t
      display-time-default-load-average nil)
(display-time-mode)
#+end_src
** display-battery

#+begin_src emacs-lisp
(display-battery-mode)
#+end_src

** doom-modeline
:PROPERTIES:
:ID:       52e5ace2-d473-4238-b34a-102a1c287fe2
:END:
#+begin_src emacs-lisp
(use-package doom-modeline
  :demand t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 24)
  (doom-modeline-hud t)
  (doom-modeline-icon t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-percent-position nil)
  (doom-modeline-time-icon nil)
  :config
  (setq
   line-number-mode nil
   column-number-mode nil))
#+end_src
** evil
:PROPERTIES:
:ID:       0be2adc9-9670-4f89-a088-70e65229c37a
:END:
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :preface (setq evil-want-keybinding nil)
  ;; :after 'general
  :hook (after-init . evil-mode)
  :init
  (setq evil-want-integration t
        evil-want-keybinding  nil
        evil-want-C-u-scroll  nil
        evil-want-C-i-jump    nil
        evil-want-C-w-delete  nil
	evil-complete-all-buffers nil
	)
  :config
  (general-define-key :states 'insert "C-g" 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; set back normal mouse behaviour
  (define-key evil-motion-state-map [down-mouse-1] nil)
  (add-hook 'after-save-hook 'evil-normal-state)
  ;; (evil-mode)
  )

(general-define-key
  :states '(normal insert)
  "C-w C-h" 'evil-window-left
  "C-w C-j" 'evil-window-down
  "C-w C-k" 'evil-window-up
  "C-w C-l" 'evil-window-right)
#+end_src

** evil-anzu
:PROPERTIES:
:ID:       17726ce4-36da-4522-8c36-d1908afc9d53
:END:
Show match counts in modeline
#+begin_src emacs-lisp
(use-package evil-anzu
  :after (evil)
  :config
  (global-anzu-mode))
#+end_src

** evil-collection
:PROPERTIES:
:ID:       33566ddf-dc6f-4d3f-9e24-4d8622b7c0f1
:END:

A collection of evil bindings not fully set in the default package

 #+begin_src emacs-lisp
(use-package evil-collection
  :after (evil)
  :init (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+end_src

** helpful
:PROPERTIES:
:ID:       2a3f7dcc-51ca-472d-b073-31cea58b42a5
:END:

#+begin_src emacs-lisp
(use-package helpful
  :demand t
  )

(general-define-key
  :states '(normal insert)
  "C-h C-v" 'describe-variable
  "C-h C-f" 'describe-function
  "C-h C-b" 'describe-bindings
  "C-h C-c" 'describe-key-briefly
  "C-h C-k" 'describe-key
  "C-h C-e" 'view-echo-area-messages
  "C-h C-j" 'describe-face)
#+end_src
** insert-variable-value
Sometimes when I'm writing code I want to be able to directly insert the value
of a variable in to the buffer I am editing.  There's probably a way to do this
if I look through the manual closely but this works for now.

#+begin_src emacs-lisp
(defun insert-any-variable-value (var)
  "Insert the value of any variable VAR at point."
  (interactive
   (list (intern (completing-read
		  "Insert variable value: "
                  (let (vars)
                    (mapatoms (lambda (sym)
				(when (boundp sym)
				  (push (symbol-name sym) vars))))
                    vars)))))
  (insert (format "%S" (symbol-value var))))

(ads/leader-keys
  "C-v" 'insert-any-variable-value)
#+end_src
** magit
:PROPERTIES:
:ID:       d5db3894-eba8-4dd6-bfd3-05bf339454f7
:END:

#+begin_src emacs-lisp
(use-package magit
  :config
  (transient-bind-q-to-quit)
  (defun ads/git-lazy ()
    (interactive)
    (save-buffer)
    (magit-stage-buffer-file)
    (magit-commit-create))
  (defun ads/git-amend ()
    (interactive)
    (save-buffer)
    (magit-stage-buffer-file)
    (magit-commit-amend "--no-edit"))

  (ads/leader-keys
   "g" '(:ignore t :wk "git")
   "gd" 'magit-dispatch
   "gg" 'magit-status
   "gk" 'magit-commit
   "gl" 'ads/git-lazy
   "go" 'ads/git-amend
   "gp" 'magit-push
   "gP" 'vc-push
   "gs" 'magit-stage-buffer-file
   "gS" 'magit-stage
   "gu" 'magit-unstage-buffer-file
   "gU" 'magit-unstage))
#+end_src

** marginalia
:PROPERTIES:
:ID:       6dd61ba5-dc71-4883-b215-4f26d461da3e
:END:

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :demand t
  :hook (after-init . marginalia-mode))
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :custom
  (markdown-fontify-code-blocks-natively)
  (markdown-fontify-code-block-default-mode)
   :config
  (add-hook 'markdown-mode-hook 'variable-pitch-mode)
  (add-hook 'markdown-view-mode-hook 'read-only-mode))

(ads/leader-keys
  :keymaps 'markdown-mode-map
  "mm" 'markdown-view-mode)

(ads/leader-keys
  :keymaps 'markdown-view-mode-map
  "mm" 'markdown-mode)
#+end_src
** nerd-icons
:PROPERTIES:
:ID:       3f5c1a1c-bd1c-4927-9230-699352ce079b
:END:

Remember run ~nerd-icons-install-fonts~ to get the font files.  Then
restart Emacs to see the effect.

   #+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t)

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
   #+end_src
** nix
#+begin_src emacs-lisp
(use-package nix-mode
  :config
  (global-nix-prettify-mode))
#+end_src
** nov (epub)
Major mode for reading EPUB files in Emacs

#+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width 80)
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

** orderless
:PROPERTIES:
:ID:       d5725e1b-f4e7-4efa-9234-4434c5ef71db
:END:

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** org
:PROPERTIES:
:ID:       fc7ed585-01d0-4b4b-97e2-1eabd86f1ce8
:END:

#+begin_src emacs-lisp
(use-package org
  :custom
  ;; (org-directory "~/org") ;; org directory set in early init
  (org-ellipsis " ·")
  (org-log-done 'time)
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  (org-hidden-keywords '(title))
  (org-hide-emphasis-markers t)
  (org-image-actual-width 0.75)
  (org-startup-with-inline-images t)
  (org-agenda-block-separator "")
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-cycle-separator-lines 0)
  (org-id-link-to-org-use-id t)
  (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  :config
  (add-hook 'org-mode-hook 'variable-pitch-mode))
#+end_src
*** org keybindings



#+begin_src emacs-lisp
(general-define-key
 :states '(normal) :keymaps 'org-mode-map
 (kbd "<tab>") 'org-cycle
 (kbd "<backtab>") 'org-shifttab)

(general-define-key
 :states  '(motion) :keymaps 'org-mode-map
 (kbd "RET") 'org-open-at-point)

(defun ads/consult-org-heading ()
  "Widen buffer, consult outline then narrow to subtree"
  (interactive)
  (widen)
  (consult-outline)
  (org-narrow-to-subtree))

(defun ads/org-scratch ()
  "Open ~/scratch.org"
  (interactive)
  (find-file "~/scratch.org"))
(ads/leader-keys "C-s" 'ads/org-scratch)
#+end_src


#+begin_src emacs-lisp
(ads/leader-keys
  :major-modes '(org-mode)
  :keymaps '(org-mode-map)
  "od" 'org-id-get-create
  "oo" 'ads/consult-headline
  "of" 'consult-outline
  "oh" 'consult-org-heading)
#+end_src
** org-appear
:PROPERTIES:
:ID:       8116b3e3-81fd-49aa-a0ff-f833c0304405
:END:

#+begin_src emacs-lisp
(use-package org-appear
  :custom
  (org-appear-autolinks t)
  (org-appear-autoentities t)
  (org-appear-autosubmarkers t)
  (org-appear-autokeywords t)
  :config
  (add-hook 'org-mode-hook 'org-appear-mode)
  (add-hook 'evil-insert-state-exit-hook
	    (lambda ()
	      (setq org-appear-delay 2)))
  (add-hook 'evil-insert-state-entry-hook
	    (lambda ()
	      (setq org-appear-delay .3))))
#+end_src

** org-babel
:PROPERTIES:
:ID:       159ea42a-2961-4b22-8454-2b5cad050279
:END:

#+begin_src emacs-lisp :lexical t
(require 'org-tempo)
(require 'ob-tangle)

(customize-set-variable 'org-src-window-setup 'current-window)
(customize-set-variable 'org-src-preserve-indentation t)
(customize-set-variable 'org-edit-src-content-indentation 0)

(setq org-confirm-babel-evaluate nil)

<<org-babel-config>>
#+end_src

*** config
:PROPERTIES:
:header-args: :noweb-ref org-babel-config
:ID:       1acbb772-0882-4bc7-b686-8af4c42cafe4
:END:

**** Structured Templates
:PROPERTIES:
:ID:       a119e8c0-9502-4298-a455-2f3f2aab2f5c
:END:

#+begin_src emacs-lisp :lexical t
(dolist
    (template
     '(
       ("el" . "src emacs-lisp")
       ("py" . "src python")
       ("sh" . "src shell")
       ("rs" . "src rust")
       ("html" . "src html")
       ("css" . "src css")
       ("cc" . "src C")
       ("cpp" . "src C++")
       ("cs" . "src C#")
       ("yaml" . "src yaml")
       ("toml" . "src toml")
       ("js" . "src javascript")
       ("jo" . "src json")
       ("ja" . "src java")
       ("sql" . "src sql")
       ))
  (add-to-list 'org-structure-template-alist template))
#+end_src

**** Languages
:PROPERTIES:
:ID:       087ccdb5-1687-4b80-8c0c-82d6f0ad1853
:END:

#+begin_src emacs-lisp
(with-eval-after-load 'org
     (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t))))

    (setq org-confirm-babel-evaluate nil)

(setq org-babel-default-header-args:python
	     '((:results . "output")
	       ))
#+end_src

** org-modern
:PROPERTIES:
:ID:       8ca06b78-1618-4366-8032-1aa4d85a8cd1
:END:

#+begin_src emacs-lisp
(use-package org-modern
  :after (org)
  :custom
  (org-modern-fold-stars
   '(("▸ " . "▾ ")
     ("  ▸ " . "  ▾ ")
     ("    ▸ " . "    ▾ ")
     ("      ▸ " . "      ▾ ")
     ("        ▸ " . "        ▾ ")
     ("          ▸ " . "          ▾ ")
     ("            ▸ " . "            ▾ ")
     ("              ▸ " . "              ▾ ")
     ))
  :config
  (global-org-modern-mode)
  )
#+end_src
** org-roam
:PROPERTIES:
:ID:       141269e3-551b-49e0-a4df-93f41c58b678
:END:
[[https://github.com/org-roam/org-roam][Org-Roam]] is an org mode implementation of Roam Research's idea of a zettelkasten
like system with links between individual notes.  It is extremely powerful but
has a bit of a learning cuve to learn your way around and how best to work with
it.

Given that I use org-roam for personal and work at the same time on work
computers I have ~~/org/personal~ and ~~/org/work~

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory org-directory)
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode)
  (org-roam-setup)
  (ads/leader-keys
   "f" '(:ignore t :wk "roam")
   "ft" 'org-roam-buffer-toggle
   "ff" 'org-roam-node-find
   "fi" 'org-roam-node-insert
   "fa" 'org-roam-alias-add
   "fD" 'org-roam-db-sync))
#+end_src

** org-tidy
:PROPERTIES:
:ID:       416c980e-16ee-49eb-a50c-bb1464855c52
:END:
[[https://github.com/jxq0/org-tidy][org-tidy]] will automatically hide property drawers

#+begin_src emacs-lisp
(use-package org-tidy
  :ensure t
  :custom
  (org-tidy-properties-style 'invisible)
  :hook
  (org-mode . org-tidy-mode))
(ads/leader-keys
  :keymaps 'org-mode-map
  "ot" 'org-tidy-untidy-buffer
  "oT" 'org-tidy-toggle)
#+end_src
** projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a popular emacs package used to manage projects

#+begin_src emacs-lisp
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode))

(ads/leader-keys
   "p" '(:ignore t :wk "projects")
   "pf" 'projectile-find-file-dwim
   "pp" 'projectile-switch-project
   "pj" 'projectile-next-project-buffer
   "pk" 'projectile-previous-project-buffer)
#+end_src
** rainbow-delimiters
:PROPERTIES:
:ID:       1854a60e-9eba-431d-a345-1f28b290e672
:END:

   #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

** rainbow-mode
:PROPERTIES:
:ID:       4fa34d65-816c-410a-85e2-9ad40f903dc9
:END:

   #+begin_src emacs-lisp
(use-package rainbow-mode
  :commands (rainbow-mode))
   #+end_src
** read-only-directories
:PROPERTIES:
:ID:       f042ad4d-9bea-45da-a918-2335f8359d8c
:END:
Some directories I want to files to be opened in read-only mode because they are usually used for
reference

#+begin_src emacs-lisp
(defcustom read-only-directories '( )
  "list of directories or files that will be opened in read only mode")

(defun find-file-read-only-directories ()
"""
start buffer in read only mode if file in a child directory
 of in any of the directores defined in read-only-directories
"""
  (dolist (read-only-directory read-only-directories)
    (when (string-search read-only-directory buffer-file-name)
      (read-only-mode))))

(add-hook 'find-file-hook 'find-file-read-only-directories)
#+end_src
** recentf
#+begin_src emacs-lisp
(use-package recentf
  :custom
  (recentf-max-menu-items 1000 "Offer more recent files in menu")
  (recentf-max-saved-items 1000 "Save more recent files")
  :config
  (recentf-mode)
  )
#+end_src
** rust
[[https://github.com/rust-lang/rust-mode][Rust-mode]] is a minimal package that probides Rust support and bindings supported
by the rust-lang team, alternatively [[https://github.com/emacs-rustic/rustic][Rustic]] offers a more fully featured experience.

#+begin_src emacs-lisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t)
  :config
  (setq rust-format-on-save t))
#+end_src
** save-hist
:PROPERTIES:
:ID:       f8c320b5-16aa-4bfd-946e-0eea50ded5e3
:END:
#+begin_src emacs-lisp
(use-package savehist
  :config
  (savehist-mode 1))
#+end_src
** sudo-edit
#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src
** ultra-scroll
Scroll Emacs like Lightining.

[[https://github.com/jdtsmith/ultra-scroll][ultra-scroll]] provides a better version of ~pixel-scroll-prescision-mode~ which
works much smoother on both Windows and Linux.

#+begin_src emacs-lisp
(use-package ultra-scroll
  :vc (ultra-scroll
       :url "https://github.com/jdtsmith/ultra-scroll"
       :main-file "ultra-scroll.el"
       :branch "main"
       :rev :newest)
  :init
  (setq scroll-conservatively 101
        scroll-margin 0)
  :config
  (ultra-scroll-mode 1))
#+end_src

** vertico
:PROPERTIES:
:ID:       c5d608cf-1635-4b53-9ca7-3d998922de20
:END:

#+begin_src emacs-lisp
(use-package vertico
  :demand t
  :hook (after-init . vertico-mode))
#+end_src

** which-key
:PROPERTIES:
:ID:       08d7fa94-ab28-4d15-afce-157dad2a79df
:END:

=which-key= is is included in EMACS 30

#+begin_src emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-enable-extended-define-key t)
  :config
  (which-key-mode)
  :custom
  (which-key-side-window-location 'bottom)
  (which-key-sort-order 'which-key-key-order-alpha)
  (which-key-side-window-max-width 0.33)
  (which-key-idle-delay 0.3))
#+end_src
* Computer specific configs
:PROPERTIES:
:header-args: emacs-lisp :tangle init.el :results none :noweb yes :comments link
:END:




Load windows only configuration
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (load-file (concat user-emacs-directory "ms-windows.el")))

(when (eq system-type 'gnu/linux)
  (load-file (concat user-emacs-directory "linux.el")))
#+end_src

Load when on appropriate system:
#+begin_src emacs-lisp
(when (string= "HYBD-QUFXNBP9Y9" system-name)
  (load-file (concat git-directory "emacs-work/work.el")))

(when (string= system-name "ganymede")
  (load-file (concat git-directory "windows-config/ganymede.el")))
#+end_src
* Windows
:PROPERTIES:
:header-args: emacs-lisp :tangle ms-windows.el :results none :noweb yes :comments link
:ID:       62c6e8d8-dc0b-482c-b92c-653a1c3f860f
:END:
Work forces me to use windows as much as I'd rather not

#+begin_src emacs-lisp
(set-message-beep 'silent)
(setq win/.emacs.d (concat "C:\\Users\\" user-login-name "\\.emacs.d\\"))
#+end_src

** Copy files to ~.emacs.d~ on tangle
Windows doesn't allow symlinks unless you are an admin which is a pain.  In
order to keep the init files working properly copy the config files to
~C:\Users\username\AppData\Roaming\.emacs.d\~ after tangle

#+begin_src emacs-lisp
(defun win/copy-config-files-to-.emacs.d ()
    (when (string= buffer-file-name ads/config-file)
      (dolist (filename
	       '("early-init.el"
		 "init.el"
		 "ms-windows.el"))
	 (let ((target-filename (concat win/.emacs.d filename)))
	   (delete-file target-filename)
	   (copy-file filename target-filename)))
      (message "Copied config files to win/.emacs.d")))
(add-hook 'org-babel-tangle-finished-hook 'win/copy-config-files-to-.emacs.d)
#+end_src

#+begin_src emacs-lisp
(ads/leader-keys
  "cW" '((lambda () (interactive) (find-file win/.emacs.d))
	 :wk "Dired .emacs.d"))
#+end_src
** AHK
:PROPERTIES:
:ID:       1788e7f1-6c96-4a3c-809a-0e4d1f656416
:END:
I use AHK a lot to make the experience of using windows less painful
#+begin_src emacs-lisp
(use-package ahk-mode
  :ensure t
  :bind (:map ahk-mode-map
	      ("C-c C-c" . ahk-run-script)
	      ("C-c C-k" . nil)
	      )
  )
#+end_src
*** Window Spy
:PROPERTIES:
:ID:       b3329a59-4d1c-4a00-9a68-6507163daa35
:END:
#+begin_src emacs-lisp
(defun ahk-launch-window-spy ()
  (interactive)
  (w32-shell-execute 1 "C:/Users/adanaos/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/AutoHotkey Window Spy.lnk"))
#+end_src
** Align windows theme with emacs
#+begin_src emacs-lisp
;; win/theme
;;   0 - dark
;;   1 - light
(setq win/theme "0")

(add-to-list 'display-buffer-alist
  (cons "win/theme-toggle" (cons #'display-buffer-no-window nil)))
(defun win/theme-align-with-emacs ()
  ;;check if light or dark theme in emacs
  (if (string= (modus-themes--current-theme) "modus-vivendi")
      (setq win/theme "0")
      (setq win/theme "1"))
  (async-shell-command
     (concat
      "powershell New-ItemProperty -Path HKCU:/SOFTWARE/Microsoft/Windows/CurrentVersion/Themes/Personalize -Name AppsUseLightTheme -Value "
      win/theme
      " -Type Dword -Force")
     "win/theme-toggle"
     ))


(add-hook 'modus-themes-after-load-theme-hook 'win/theme-align-with-emacs)
#+end_src
** Browse in Edge
Some things only work in edge on my work computer
#+begin_src emacs-lisp
(defun win/browse-url-edge (url)
    (shell-command (concat "start msedge " url)))
#+end_src

** Hide DOS EOL
Some the files I work with don't have consistent line endings DOS or UNIX

#+begin_src emacs-lisp
(defun win/hide-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+end_src


** Exec ~.bat~ in new cmd window
Often emacs and windows don't always play nice together and causes emacs to lock
up, this executes a ~.bat~ script in a new window, which seems to fix the problems
I have.

This version keeps it as a sub process, if you need to fix that you can save the
~start-process~ to a variable and ~(set-process-query-on-exit-flag
start-process-variable nil)~
#+begin_src emacs-lisp
(defun win/cmd-exec-bat-new-window (input-str)
  (let ((cmd-str (concat "start cmd /k " input-str)))
    (start-process "cmd" nil "cmd.exe" "/C" cmd-str)))

#+end_src
** Org-attatch dir in windows explorer
#+begin_src emacs-lisp
(defun org-attatch-open-win-explorer ()
  (interactive)
  (w32-shell-execute 1 (org-attach-dir-get-create)))
#+end_src
** Dired open in windows default
#+begin_src emacs-lisp
(defun ads/dired-win-default ()
    (interactive)
    (let ((filename (dired-replace-in-string "/"
                                             "\\"
                                             (dired-get-filename))))

      (w32-shell-execute 1 filename)))

(general-define-key
 :keymaps 'dired-mode-map
 "<tab>" 'ads/dired-win-default)

#+end_src

#+RESULTS:
** Provide ~ms-windows.el~

#+begin_src emacs-lisp
(provide 'ms-windows.el)
#+end_src

* Linux
:PROPERTIES:
:header-args: emacs-lisp :tangle linux.el :results none :noweb yes :comments link
:ID:       9e7b9a70-6895-4032-bedf-f6281cd0bc67
:END:
** nixconfig
jump to my nix config files
#+begin_src emacs-lisp
(ads/leader-keys
  "cn" '((lambda () (interactive) (find-file "/etc/nixos/configuration.nix"))
	 :which-key "ni config"))
#+end_src
