#+title:Adrian Danao-Schroeder config
#+PROPERTY: header-args:emacs-lisp :tangle ./readme.el :results none
* Set background
:PROPERTIES:
:ID:       5234d029-e9f9-4471-bb50-d1f70161c88a
:END:
Please don't blind me with a white background

#+begin_src emacs-lisp
(set-background-color "#000000")
#+end_src

* Straight.el
:PROPERTIES:
:ID:       33fd1c57-a64e-472d-a868-e8f4703ec14b
:END:
Default setup for Straight.el
#+begin_src emacs-lisp
;; (defvar bootstrap-version)
;; (let ((bootstrap-file
;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
;;       (bootstrap-version 5))
;;   (unless (file-exists-p bootstrap-file)
;;     (with-current-buffer
;;         (url-retrieve-synchronously
;;          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
;;          'silent 'inhibit-cookies)
;;       (goto-char (point-max))
;;       (eval-print-last-sexp)))
;;   (load bootstrap-file nil 'nomessage))

#+end_src
** Straight settings
:PROPERTIES:
:ID:       53dec607-ff19-40a1-893f-a0f87f8950b7
:END:
#+begin_src emacs-lisp
;; (straight-use-package 'use-package)
#+end_src

* System .emacs Setup
:PROPERTIES:
:ID:       60973f19-e31e-470f-919d-dc03dfb4c377
:END:
Setting default file and directory locations, these are all defined in the default startup .emacs file to work on different computers
see [[file:.emacs][.emacs]] for an example of what it normally looks like
** Emacs Directory
:PROPERTIES:
:ID:       cc2f3d7e-e711-4a85-9ba5-21884140130d
:END:
   Define the user emacs directory: ads/user-dir-emacs

   defined in the default .emacs file used for emacs init to work on various computers
** Org Directory
:PROPERTIES:
:ID:       d1e20b2b-1bf0-43f6-8b8b-c513a5733019
:END:
   User org-mode file directory: ads/user-dir-org
   defined in default .emacs config file
** Personal Org Directory
:PROPERTIES:
:ID:       950777f8-b1a9-4b9b-8e22-abb3002660d5
:END:
   Personal org directory (see all tasks on work computer and shared inbox)
   ads/personal-dir-org
** Readme config file
:PROPERTIES:
:ID:       4fe81ff3-5140-458c-9820-69e4211b8f46
:END:
ads/user-dir-readme - this files full path

** init.el config file
:PROPERTIES:
:ID:       ebd6d51b-2b48-4d4a-a55f-15ca629ef22e
:END:
ads/user-dir-config
directory for the actual config file used when running

** Computer id
:PROPERTIES:
:ID:       62802298-f2cf-4169-b12e-72c3665012df
:END:
set ads/computer-id
currently:
    work
    Personal

** Load Path
:PROPERTIES:
:ID:       003e6ea1-1e1d-4803-b7e2-e645f3497823
:END:
   #+begin_src emacs-lisp
(add-to-list 'load-path ads/user-dir-emacs)
(add-to-list 'load-path ads/user-dir-org)
   #+end_src

** Debug on Error
:PROPERTIES:
:ID:       60a1ecec-c4e0-4533-a9a0-cd0e9bdaa77b
:END:
   Nice to load it early, makes troubleshooting a problem easier
   #+begin_src emacs-lisp
(setq debug-on-error t)
   #+end_src

* Package System Setup
:PROPERTIES:
:ID:       6ac5e1b4-df1f-4739-bdc2-4143594beeb4
:END:
** Package setup
:PROPERTIES:
:ID:       39c13c97-fa17-4ecd-a7b4-8ea57ea4a3ae
:END:
   #+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
			 ))
(if (not package--initialized)
    (package-initialize))

(unless package-archive-contents
     (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
   #+end_src


** TODO Auto Updates
:PROPERTIES:
:ID:       7aa55287-57c4-4b75-8713-82ed52b308f5
:END:

* Better Defaults
:PROPERTIES:
:ID:       7866fcf1-0c26-43f6-b994-014bd343e8c4
:END:
Setup some default startup parameters
#+begin_src emacs-lisp
(setq-default
 cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
 require-final-newline t                ; Newline at end of file
 scroll-margin 3                        ; Add a margin when scrolling vertically
 scroll-conservatively 10               ; Avoid recentering when scrolling far
 help-window-select t                   ; Focus new help windows when opened
 initial-scratch-message "Welcome back"             ; Empty the initial *scratch* buffer
 visible-bell nil                       ; set up the visible bell (no annoying beeping sounds)
 inhibit-startup-echo-area-message t
 inhibit-startup-screen t
 )

(blink-cursor-mode 0)                   ; Prefer a still cursor
(fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ; Iterate through CamelCase words
(put 'downcase-region 'disabled nil)    ; Enable downcase-region
(put 'upcase-region 'disabled nil)      ; Enable upcase-region
(scroll-bar-mode -1)                    ; Disable the visible scrollbar
(tool-bar-mode -1)                      ; Disablet the toolbar
(tooltip-mode -1)                       ; Disable tooltips
(menu-bar-mode -1)                      ; Disable the menu bar
(set-fringe-mode 10)                    ; Add some breathing room

#+end_src
** Backup Directory
:PROPERTIES:
:ID:       485fda89-e7b6-43ac-9ae0-ebb1de97354f
:END:
#+begin_src emacs-lisp

(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )

#+end_src
** Backup Predicate
:PROPERTIES:
:ID:       c9aee546-fd9e-42ba-9144-a0ada5069db8
:END:
#+begin_src emacs-lisp
(setq backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
             (not
              (let ((method (file-remote-p name 'method)))
                (when (stringp method)
                  (member method '("su" "sudo"))))))))
#+end_src
** Async shell commands in background
:PROPERTIES:
:ID:       82f2344e-b691-4478-8123-835245e3cdd6
:END:
when calling async shell it's annoying to have stuff pop up int hte
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
  (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src


* Basic Functions
:PROPERTIES:
:ID:       d1c3dfde-0150-4e61-b70b-6415ae331e20
:END:
** Read only directories
:PROPERTIES:
:ID:       497e1eaa-946f-47cb-83b9-71f031125e11
:END:
some directories I want to files to be opened in read-only mode because they are usually used for reference rather than
#+begin_src emacs-lisp

(defun find-file-read-only-directories ()
"""
start buffer in read only mode if file in a child directory
 of in any of the directores defined in read-only-directories
"""
  (dolist (read-only-directory read-only-directories)
  ;; (print read-only-directory)
  (when
      (string-search read-only-directory buffer-file-name)
      (read-only-mode)
      ;; (print "open normally")
    )
  ))

(add-hook 'find-file-hook 'find-file-read-only-directories)

#+end_src
** Browse in Edge
:PROPERTIES:
:ID:       9414698c-d7f5-4491-81a1-d13254cdc236
:END:
edge sucks but some things only work in edge
#+begin_src emacs-lisp
(defun ads/browse-url-edge (url)
    (shell-command (concat "start msedge " url)))

#+end_src

* Basic UI Config
:PROPERTIES:
:ID:       b5b966cb-e846-4885-8ad2-03bf41007266
:END:

** Font configuration
:PROPERTIES:
:ID:       ff3c9d05-0ace-4053-8503-df43bb36e1e6
:END:
Setting up font properties, I like Et bembo, but for some reason can't find where I got Etbembo from on my windows machines

#+begin_src emacs-lisp
(if (string= system-type "gnu/linux")
    (setq
     serif "Etbb"
     mono "Fira Code Nerd Font")
    (setq
     serif "EtBembo"
     mono "Fira Code Retina"))
(setq sans "Cantarell")

;; Set Font sizes
(defvar ads/default-font-size 160)
(defvar ads/default-variable-font-size 160)

;Set line spacing
(setq line-spacing .2)

;; Set default font
(set-face-attribute 'default nil :font mono :height ads/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font mono :height ads/default-font-size)

;; Set the variable pitch fa
(set-face-attribute 'variable-pitch nil :font serif :height ads/default-variable-font-size :weight 'regular)

#+end_src


** Line Numbers
:PROPERTIES:
:ID:       037e1e13-ba3c-4958-a89a-41dfaaea4836
:END:
   #+begin_src emacs-lisp
   ;; Enable line numbers
   ;; (global-display-line-numbers-mode nil)

   ;; Disable lines in some modes
   (dolist (mode '(prog-mode-hook
		   ))
	   (add-hook mode(lambda () (display-line-numbers-mode 1))))
   #+end_src

** Column Numbers
:PROPERTIES:
:ID:       6d107725-8de4-485b-8f14-841e62d7cc95
:END:
Enable column numbers
   #+begin_src emacs-lisp
 (column-number-mode)

   #+end_src

** Rainbow Delimiters
:PROPERTIES:
:ID:       ec0a1ea5-00cd-4cad-ae8d-10042cf012fb
:END:
[[https://github.com/Fanael/rainbow-delimiters][GitHub - Fanael/rainbow-delimiters: Emacs rainbow delimiters mode]]
   #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src


** Restore session
:PROPERTIES:
:ID:       729db0fc-28ae-43f2-88a3-a608e5de9955
:END:

#+begin_src emacs-lisp
;(savehist-mode 1)
;(add-to-list 'savehist-additional-variables 'kill-ring) ;; for example
#+end_src

** Unbind Hide/kill emacs session C-x
:PROPERTIES:
:ID:       cc5eb2dd-ff05-4824-8a17-7f00e1f3133c
:END:

In my clumsyness I've hit theste  too many times

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c") 'nil)
(global-set-key (kbd "C-x C-z") 'nil)
#+end_src

** Unbind Emacs help stuff
:PROPERTIES:
:ID:       dabe6b5a-0bf4-4563-b1c4-e8721b7903ed
:END:
I don't need to open:
 - tutorial
 - hello

#+begin_src emacs-lisp
(global-set-key (kbd "C-h t") 'nil)
(global-set-key (kbd "C-h h") 'nil)
#+end_src
** Hide Modeline Mode
:PROPERTIES:
:ID:       4ff5832a-dfed-4f63-90bb-0d69d374ead6
:END:
#+begin_src emacs-lisp

(defvar-local hidden-mode-line-mode nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
#+end_src

* Keybinding Config
:PROPERTIES:
:ID:       24a46150-655e-4260-8d56-b81586a3ca66
:END:
** Global Esc
:PROPERTIES:
:ID:       1d2b0ab1-a87b-4dfb-9d25-d417d941025f
:END:
   #+begin_src emacs-lisp
   ;;Make ESC quit prompts (why wouldn't you want that?)
   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src


** General Leader Keys
:PROPERTIES:
:ID:       2fc053bb-1062-4bd2-82fa-7b36ed1273cc
:END:



   #+begin_src emacs-lisp

(define-key global-map (kbd "C-SPC") 'nil)
(use-package general
 :after evil
 :config
 (general-create-definer ads/leader-keys
   :keymaps '(normal insert visual emacs)
   :prefix "SPC"
   :global-prefix "C-SPC")

 (ads/leader-keys
   "t" '(:ignore t :wk "toggles")

   "j" '(:ignore t :which-key "org")

   "er" '(lambda () (interactive)
	   (find-file (concat ads/user-dir-readme))
           :wk "Readme Config")

   "ew" '(lambda () (interactive)
	   (find-file "c:/_Git/emacs-work/work-config.org")
           :wk "Work Config")

   "e." '(lambda () (interactive)
	   (find-file ads/user-dir-config)
           :wk ".emacs Config")

   "ei" '(lambda () (interactive) (find-file (concat ads/user-dir-emacs "init.el"))
           :which-key "ORG init")

   "ez" '(lambda () (interactive)
	   (find-file (concat ads/git-dir "zmk-config/config/corne.keymap"))
           :wk "ZMK Config")
   "eZ" '(lambda () (interactive)
	   (counsel-find-file (concat ads/git-dir "zmk-config/"))
           :wk "ZMK Config")

   "e" '(:ignore t :whch-key "eval")
   "eb" '(eval-buffer :which-key "eval-buffer")
   "ep" '(eval-last-sexp :which-key "eval-last-sexp")
   "eo" '(org-mode-restart :which-key "org-mode-restart")

   "k" '(:ignore t :wk "kill")
   "kj" '(kill-buffer-and-window :which-key "kill-buffer-and-window")
   "kk" '(kill-this-buffer :which-key "kill-this-buffer")
   "kl"'(delete-window :wk "delete-window")
   ))

   #+end_src
** Evil
:PROPERTIES:
:ID:       4108c640-7fb6-4480-894c-6ab475b076d5
:END:

   #+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-C-w-delete nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-normal-state-map (kbd "q") 'nil)
  ;; Use visual line motions even outside of visual-line mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; ;; Use C-<hjkl> to move around in insert
  ;; (evil-global-set-key 'insert (kbd "C-h") 'evil-backward-char)
  ;; (evil-global-set-key 'insert (kbd "C-l") 'evil-forward-char)
  ;; (evil-global-set-key 'insert (kbd "C-k") 'evil-previous-line)
  ;; (evil-global-set-key 'insert (kbd "C-j") 'evil-next-line)


  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))



   #+end_src
** Toggle line width
:PROPERTIES:
:ID:       6b3c7584-d563-464f-b076-8ff813606615
:END:
#+begin_src emacs-lisp
(defun ads/toggle-lines ()
  (interactive)
  (toggle-truncate-lines)
  ;; (visual-line-mode)
  ;; (visual-fill-column-mode "toggle")
  )

(ads/leader-keys
   "tl" '(ads/toggle-lines :wk"toggle truncate")
)
#+end_src
** Normal mode after save
:PROPERTIES:
:ID:       5ce816f8-241b-43e7-b7fb-ace111cd7183
:END:
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'evil-normal-state)
#+end_src
** Fix trailing whitespace on save
:PROPERTIES:
:ID:       f06e74b1-4560-4ed7-bab7-c83753ddea85
:END:
#+begin_src emacs-lisp
(setq delete-trailing-lines nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Evil Buffer control
:PROPERTIES:
:ID:       a9c37681-3c5b-4267-8711-d11270012bfa
:END:
#+begin_src emacs-lisp
(evil-global-set-key 'normal (kbd "C-M-j")  'counsel-switch-buffer)
#+end_src


** Evil Window Control
:PROPERTIES:
:ID:       ed280cc2-6a41-447f-a6c1-be01a2ac8792
:END:
I don't want to have to stop pressing ctrl also go back to normal mode if in insert mode

#+begin_src emacs-lisp

(evil-global-set-key 'normal (kbd "C-w C-h") 'evil-window-left)
(evil-global-set-key 'insert (kbd "C-w C-h") (lambda () (interactive)
					       ;; (normal-mode)
					       (call-interactively 'evil-window-left)))


(evil-global-set-key 'normal (kbd "C-w C-j") 'evil-window-down)
(evil-global-set-key 'insert (kbd "C-w C-j") (lambda () (interactive)
					       ;; (normal-mode)
					       (call-interactively 'evil-window-down)))


(evil-global-set-key 'normal (kbd "C-w C-k") 'evil-window-up)
(evil-global-set-key 'insert (kbd "C-w C-k") (lambda () (interactive)
					       ;; (normal-mode)
					       (call-interactively 'evil-window-up)))


(evil-global-set-key 'normal (kbd "C-w C-l") 'evil-window-right)
(evil-global-set-key 'insert (kbd "C-w C-l") (lambda () (interactive)
					       ;; (normal-mode)
					       (call-interactively 'evil-window-right)))

(evil-global-set-key 'normal (kbd "C-w C-e") 'balance-windows)
(evil-global-set-key 'insert (kbd "C-w C-e") (lambda () (interactive)
					       ;; (normal-mode)
					       (call-interactively 'balance-windows)))
#+end_src
** Undo tree visualizer
:PROPERTIES:
:ID:       b1d2bf46-117c-4e9b-8ca3-a1d92ac3cd1c
:END:
[[https://elpa.gnu.org/packages/undo-tree.html][GNU ELPA - undo-tree]]

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq evil-undo-system 'undo-tree)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist '(("." . "~/.undo-tree-history")))))

(evil-global-set-key 'normal (kbd "C-x C-u") 'undo-tree-visualize)
#+end_src

** Remove Line breaks in region
:PROPERTIES:
:ID:       8659df8d-ba59-4ebe-a1d6-4229100b8002
:END:
#+begin_src emacs-lisp
(defun ads/remove-newlines-in-region ()
  "Removes all newlines in the region."
  (interactive)
  (save-restriction
    (narrow-to-region (point) (mark))
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match " " nil t))))

#+end_src

** Fix file dir formatting for win
:PROPERTIES:
:ID:       25693cf1-d631-4381-b8ee-5a648c43032f
:END:
this is always so annoying
#+begin_src emacs-lisp
(defun ads/format-dir-winstyle ()
  "Removes all newlines in the region."
  (interactive)
  (save-restriction
    (narrow-to-region (point) (mark))
    (goto-char (point-min))
    (while (search-forward "\\" nil t) (replace-match "\\\\" nil t))))

#+end_src


** Regex Replace Keybindings
:PROPERTIES:
:ID:       dd9ec888-4861-436d-976f-c1964fa29869
:END:
   #+begin_src emacs-lisp
(ads/leader-keys
    "r"  '(:ignore t :wk "replace")
    "rr" 'replace-regexp
    "rn" '(ads/remove-newlines-in-region :wk "remove new lines")
    "rs" '(ads/format-dir-winstyle :wk "format dir style windows")
)
   #+end_src


** Insert to toggle comment
:PROPERTIES:
:ID:       9a8815ce-3ad0-4f76-b221-8b225b42c824
:END:
Normally insert enables overtype, but I've never once wanted that

#+begin_src emacs-lisp
(evil-global-set-key 'normal (kbd "<insert>") 'comment-line)
(evil-global-set-key 'insert (kbd "<insert>") 'comment-line)
(evil-global-set-key 'visual (kbd "<insert>") 'comment-line)
(evil-global-set-key 'normal (kbd "M-;") 'comment-line)
(evil-global-set-key 'insert (kbd "M-;") 'comment-line)
(evil-global-set-key 'visual (kbd "M-;") 'comment-line)
(define-key prog-mode-map (kbd "C-;") 'comment-line)
#+end_src

* Theme Setup
:PROPERTIES:
:ID:       039faa87-f43b-4708-b607-99a5e9f5bf68
:END:


** Set Custom Theme Directory
:PROPERTIES:
:ID:       ff679a4d-2e88-4003-8598-b00225a4a7cb
:END:
    A little annoying that I have to specify this and it isn't loaded from load path and that each theme file must be named ~foo-theme.el~ but I'm not about to rewrite something minor

    #+begin_src emacs-lisp
(setq custom-theme-directory ads/user-dir-emacs)
    #+end_src

** Color theme list
:PROPERTIES:
:ID:       4c3f5b1d-9bc3-4e5a-a517-f4305a3a7bea
:END:

#+begin_src emacs-lisp
(defvar ads/switch-themes-var
  (let ((themes-list (list
			    'ads-dark
			    'ads-light
)))
    (nconc themes-list themes-list))
  "A circular list of themes to keep switching between.
  Make sure that the currently enabled theme is at the head of this
  list always.

  A nil value implies no custom theme should be enabled.")
#+end_src

** Color Theme
:PROPERTIES:
:ID:       7ccb90ab-82f7-4904-8775-19ad2cf2b24c
:END:
 #+begin_src emacs-lisp
(use-package doom-themes
    :init
(load-theme (car ads/switch-themes-var) t)
    )

 #+end_src

** Toggle Theme
:PROPERTIES:
:ID:       51b77087-f3e9-4a14-b52c-b28371dacb24
:END:

Toggle between themes, bound to SCP-tt

If on windows toggle app theme as well

#+begin_src emacs-lisp
(defun ads/quick-switch-theme ()
  "Switch between to commonly used faces in Emacs.
One for writing code and the other for reading articles."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme))
  (if-let* ((next-theme (cadr ads/switch-themes-var)))
      (progn (when-let* ((current-theme (car ads/switch-themes-var)))
               (disable-theme (car ads/switch-themes-var)))
             (load-theme next-theme t)
             (message "Loaded theme: %s" next-theme))
    ;; Always have the dark mode-line theme
    (mapc #'disable-theme (delq 'smart-mode-line-dark custom-enabled-themes)))
  (setq ads/switch-themes-var (cdr ads/switch-themes-var))
  (when
      (string= system-type "windows-nt")
      (ads/windows-align-emacs-darkmode))
  )


(ads/leader-keys
    "tt" '(ads/quick-switch-theme :wk "toggle theme"))

#+end_src
** Refresh Theme
:PROPERTIES:
:ID:       a720ba6d-a655-4f6f-bd98-e27cc80edf35
:END:

#+begin_src emacs-lisp
(defun ads/refresh-theme ()
  (interactive)
  (load-theme (car custom-enabled-themes) t)
)
(ads/leader-keys "tj" 'ads/refresh-theme)
#+end_src

** Auto Refresh Theme
:PROPERTIES:
:ID:       50787d54-5789-4a17-a0fb-0316aaa92324
:END:
Check if the current theme matches the file being edited on save, if so refresh the current theme
#+begin_src emacs-lisp
(defun ads/refresh-theme-auto()
  (when (cl-search
     (symbol-name (car custom-enabled-themes))
     (file-name-base buffer-file-name))
    (ads/refresh-theme)))
(add-hook 'after-save-hook #'ads/refresh-theme-auto)
#+end_src
** Transparency Toggle
:PROPERTIES:
:ID:       70847ad0-8fee-4868-aabd-a40ce7255ba2
:END:
#+begin_src emacs-lisp
(defun ads/toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(92 . 92) '(100 . 100)))))

(ads/leader-keys "tr"'(ads/toggle-transparency :wk "toggle transparency"))
#+end_src
** Doom Modeline
:PROPERTIES:
:ID:       f3e96ca0-471d-4e4f-9e0a-ff2e64c14920
:END:

   #+begin_src emacs-lisp

   (use-package all-the-icons)

   ;; Doom modeline config
   (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1)
   )


   #+end_src

** Set window title
:PROPERTIES:
:ID:       a17d66ff-9faf-40a6-9aa0-907a98570cf1
:END:

#+begin_src emacs-lisp
(setq frame-title-format "%b")
#+end_src

* UI Config
:PROPERTIES:
:ID:       6f1317d8-79b0-42f1-bcf4-9836fed26829
:END:
** Which key
:PROPERTIES:
:ID:       189c7e96-efc6-4907-9ed2-9e0555cc5c05
:END:

   #+begin_src emacs-lisp

   (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))


   #+end_src

** Counsel
:PROPERTIES:
:ID:       0d4eb503-1adc-4b16-8991-e5dbf0b6f37d
:END:

   #+begin_src emacs-lisp
   (use-package counsel
     :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
     :custom
     (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
     :config
     (counsel-mode 1))

(defun counsel-find-file-read-only (fpath)
  (interactive)
  (counsel-find-file fpath)
  (read-only-mode))


   #+end_src

** Ivy
:PROPERTIES:
:ID:       d910fb36-a83f-4ff1-8142-af96ebb5eadf
:END:

   #+begin_src emacs-lisp

   (use-package ivy
    :diminish ;; Hides from the mode line
    :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


   (use-package ivy-rich
     :after ivy
     :init
     (ivy-rich-mode 1))


(define-key ivy-minibuffer-map (kbd "S-SPC") 'nil) ;
   #+end_src

** Ivy Prescient
:PROPERTIES:
:ID:       b1423510-12fa-443b-972a-0e76bf21b43b
:END:

 Still not working ¯\_(ツ)_/¯ not sure why though, saying Ivy Prescient is not on melpa

   #+begin_src emacs-lisp
   (use-package ivy-prescient
     :after counsel
     :custom
     (ivy-prescient-enable-filtering nil)
     :config
      ;; Uncomment the following line to have sorting remembered across sessions!
     (prescient-persist-mode 1)
     (ivy-prescient-mode 1))
    #+end_src


** Helpful
:PROPERTIES:
:ID:       0f8e08e4-b55e-46fb-b5c3-98552b41abc7
:END:

   #+begin_src emacs-lisp

   (use-package helpful
     :ensure t
     :commands (helpful-callable helpful-variable helpful-command helpful-key)
     :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
     :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))

(global-set-key (kbd "C-h C-v") 'describe-variable)
(global-set-key (kbd "C-h C-f") 'describe-function)
(global-set-key (kbd "C-h C-b") 'describe-bindings)
(global-set-key (kbd "C-h C-c") 'describe-key-briefly)
(global-set-key (kbd "C-h C-k") 'describe-key)
(global-set-key (kbd "C-h C-e") 'view-echo-area-messages)
(global-set-key (kbd "C-h C-j") 'describe-face)
   #+end_src

** Browse Kill-Ring
:PROPERTIES:
:ID:       9ecff51d-7a15-434d-ab68-793779b8e541
:END:

#+begin_src emacs-lisp
(use-package browse-kill-ring
  :ensure t
  :config
  ;; (browse-kill-ring-default-keybindings) ended up setting this myself down below same thing but I know what idiot set it
  (setq browse-kill-ring-highlight-current-entry t)
  )
(global-set-key (kbd "M-y") 'browse-kill-ring)

;; I like my evil bindings
(define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
(define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+end_src

** Hydra Text Scaling
:PROPERTIES:
:ID:       65f9f83a-f029-4b50-b0e6-93b38cdda752
:END:


#+begin_src emacs-lisp

(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 2)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(ads/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Hydra window adjust
:PROPERTIES:
:ID:       2161697f-bc09-4feb-974e-9993e23d24a5
:END:

#+begin_src emacs-lisp
(defhydra hydra-window-adjust (:timeout 5)
  ("k" (evil-window-increase-height 5) "increase height")
  ("j" (evil-window-decrease-height 5) "decrease height")
  ("h" (evil-window-increase-width 10) "increase width")
  ("l" (evil-window-decrease-width 10) "decrease width")
  ("e" balance-windows "balance windows")
  ("f" nil "finished" :exit t)
  )

(ads/leader-keys "C-w" '(hydra-window-adjust/body :wk "hydra window adjust"))
#+end_src

** Smart Parens
:PROPERTIES:
:ID:       b6c63915-28b7-48fe-8b51-9c9e2b4c8d03
:END:
[[https://github.com/Fuco1/smartparens/tree/fb1ce4b4013fe6f86dde9dd5bd5d4c032ab0d45b][Smartparens Github]]
[[https://github.com/expez/evil-smartparens][Evil Smartparens]]

#+begin_src emacs-lisp
(use-package evil-smartparens)

(use-package smartparens-config
  :ensure smartparens
  :config (progn (show-smartparens-global-mode t)))
(require 'smartparens-config)

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
(show-paren-mode t)
#+end_src

** Emojify 🎉 :
:PROPERTIES:
:ID:       528d1423-8b04-4fbc-b0ce-a0c66cd77e21
:END:
  I think emojis are 🏆
  Also Using emojis as labels is a great way to quickly identify things

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode)
  ;; (setq emojify-emoji-styles '(ascii unicode))
  )
(add-hook 'after-init-hook #'global-emojify-mode)

(setq emojify-emoji-styles '(ascii unicode))
(ads/leader-keys
       ";" '(emojify-insert-emoji :wk "insert emoji")
     )
#+end_src


* Org Mode
:PROPERTIES:
:ID:       eafc9f46-4818-4c5b-b0b1-d22ee5aa6606
:END:
** Org Mode Setup
:PROPERTIES:
:ID:       41a4cac3-ce56-450d-ac93-f56537e1dc41
:END:

#+begin_src emacs-lisp

  (defun ads/org-mode-setup ()
      (interactive)
      ;; (org-indent-mode t)
      (variable-pitch-mode 1)
      (visual-line-mode 1)
      (setq org-image-actual-width (/ (car (window-text-pixel-size)) 1.5))
      ;; (org-redisplay-inline-images)
      ;; Replace list hyphen with dots
      (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
      )


(add-hook 'org-mode-hook 'ads/org-mode-setup)

(ads/leader-keys "of" '(ads/org-mode-setup :wk "org mode setup fn"))
   #+end_src

** Keybindings
:PROPERTIES:
:ID:       9b58268d-cab5-4571-90ad-d041c2662467
:END:

    #+begin_src emacs-lisp
(ads/leader-keys
    "o" '(:ignore t :wk "org")
    "oc" '(org-capture :wk "capture")
    "oj" '(org-store-link :wk "org-store-link")
    "oi" '(org-insert-last-stored-link :wk "org-insert-last-stored-link")
)
    #+end_src
***  Unbind Cx Cn
:PROPERTIES:
:ID:       d8db277a-a0dc-4003-ab2a-6487c79312ed
:END:
useful for narrowing headers
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-n") 'nil)
#+end_src
*** Narrow Commands
:PROPERTIES:
:ID:       9772db6c-da1c-41e0-8b62-13771874a81a
:END:
org-toggle-narrow-to-subree does not work for some reason when I call it, using general, same code but this works
#+begin_src emacs-lisp
(defun ads/org-toggle-narrow ()
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (org-narrow-to-subtree)))

(ads/leader-keys
    "n" '(:ignore t :wk "org Narrow")
    "C-n" '(ads/org-toggle-narrow :wk "Toggle Narrow")
    "ns" '(org-narrow-to-subtree :wk "Subtree")
    "ne" '(org-narrow-to-element :wk "Element")
    "nb" '(org-narrow-to-block :wk "Block")
    "nd" '(org-narrow-to-defun :wk "Defun")
    "nn" '(narrow-to-region :wk "Region")
    "nw" '(widen :wk "Widen")
)
    #+end_src

** General Org
:PROPERTIES:
:ID:       5d216e58-b81e-4795-a9ca-391807f31b8a
:END:
Some general org config stuff, may be worth cleaning up at some point and splitting up all of this into different headings
   #+begin_src emacs-lisp
   (use-package org
	:config
	(setq org-ellipsis " ▾ "
	      org-directory ads/user-dir-org
	      org-agenda-start-with-log-mode t
	      org-log-done 'time
	      org-log-into-drawer t
	      org-pretty-entities t
	      org-pretty-entities-include-sub-superscripts nil
	      org-hidden-keywords '(title)
	      org-hide-emphasis-markers t
	      org-src-preserve-indentation t
	      org-image-actual-width (/ (car (window-text-pixel-size)) 2)
	      org-startup-with-inline-images t
	      org-startup-indented t
	      org-startup-folded t
	      org-agenda-block-separator ""
	      org-fontify-whole-heading-line t
	      org-fontify-done-headline t
	      org-fontify-quote-and-verse-blocks t
	      org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package
	      org-cycle-separator-lines 0
	      org-id-link-to-org-use-id t
	      org-blank-before-new-entry '((heading . nil)
					   (plain-list-item . nil))
	      )

	;:hook (org-mode . ads/org-mode-setup)
	(require 'org-habit)
	(require 'org-attach)
	(add-to-list 'org-modules 'org-habit 'org-checklist)
	(setq org-habit-graph-column 60)

	(setq org-todo-keywords
	  '((sequence "TODO(t)" "|" "DONE(d!)")
	    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)"
		      "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

	;; Save Org buffers after refiling!
	(advice-add 'org-refile :after 'org-save-all-org-buffers)

	(setq org-tag-alist
	  '((:startgroup)
	     ; Put mutually exclusive tags here
	     (:endgroup)
	     ("@errand" . ?E)
	     ("@home" . ?H)
	     ("@work" . ?W)
	     ("agenda" . ?a)
	     ("planning" . ?p)
	     ("publish" . ?P)
	     ("batch" . ?b)
	     ("note" . ?n)
	     ("idea" . ?i)))

	(org-indent-mode t)
	(variable-pitch-mode 1)
	(visual-line-mode 1)

	(put 'narrow-to-region 'disabled nil)
	)


   #+end_src

** Add IDs headings
:PROPERTIES:
:ID:       5883cdaa-6464-4916-98be-d789eaeae569
:END:
I haven't decided if I want this to be adding them on every save
#+begin_src emacs-lisp
(defun ads/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create))


(add-hook 'org-mode-hook
	  (lambda ()
	    (add-hook 'before-save-hook
	    'ads/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src
** Hide :PROPERTIES: Drawer
:PROPERTIES:
:ID:       481e6876-b812-4f7c-aa37-58ecc98c5532
:END:

[[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode][emacs - Completely hide the :PROPERTIES: drawer in org-mode - Stack Overflow]]

#+begin_src emacs-lisp
(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                    (point-min)
                    (point)))
             (end (if globalp
                    (point-max)
                    (if (eq state 'children)
                      (save-excursion
                        (outline-next-heading)
                        (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                       (save-excursion
                         (outline-next-heading)
                           (point)))
                     (msg (format
                            (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                            (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                  (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))

;;(org-cycle-hide-drawers 'overview)
#+end_src

** Copy ID to clipboard for linking
:PROPERTIES:
:ID:       accb5412-6094-4cc7-bad5-fd7a143616bc
:END:
#+begin_src emacs-lisp
(defun ads/copy-id-to-clipboard()
  "Copy the ID property value
to killring, if no ID is there then create a new unique ID.
This function works only in org-mode buffers.
The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
  (interactive)
  (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
    (setq mytmpid (funcall 'org-id-get-create))
    (kill-new mytmpid)
    (message "Copied %s to killring (clipboard)" mytmpid)
    ))
(ads/leader-keys "C-l" '(ads/copy-id-to-clipboard :wk "ID to clipboard"))
#+end_src


** Org Refile Targets
:PROPERTIES:
:ID:       9f3b1368-e93c-4879-bc96-a789b11df83b
:END:
Refile targets dependant on computer id

#+begin_src emacs-lisp

  (setq ads/conf-task-file (concat ads/personal-dir-org "conf-tasks.org"))
  (setq ads/work-task-file (concat ads/user-dir-org "work.org"))
    (if (string= ads/computer-id "personal")
	  (setq org-refile-targets
		(list
		  '("personal.org" :maxlevel . 1)
		  '(ads/conf-task-file :maxlevel . 1))))


      (if (string= ads/computer-id "work")
	  (setq org-refile-targets
		(list
		  '(ads/work-task-file :maxlevel . 1)
		  '(ads/conf-task-file :maxlevel . 1))))

	      ;; Save Org buffers after refiling!
	  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Org Archive
:PROPERTIES:
:ID:       31de7a32-ffbe-4b6d-b91b-d73691ca757f
:END:

#+begin_src emacs-lisp
(setq org-archive-location "archive.org::datetree/")
(ads/leader-keys
    "C-a" '(org-archive-subtree :wk "org-archive-subtree"))
#+end_src

** Org Appear mode
:PROPERTIES:
:ID:       f7f73d42-fd1c-4aba-80fd-13d601681d59
:END:
Make it less of a pain to edit emphasized text in org mode [[https://github.com/awth13/org-appear][awth13/org-appear]]

#+begin_src emacs-lisp
(use-package org-appear)
(add-hook 'org-mode-hook 'org-appear-mode)
(setq  org-appear-autolinks t)
(setq org-appear-autoentities t)
(setq org-appear-autosubmarkers t)
(setq org-appear-autokeywords t)

(add-hook 'evil-insert-state-exit-hook
	  (lambda ()
	    (setq org-appear-delay 2)))

(add-hook 'evil-insert-state-entry-hook
	  (lambda ()
	    (setq org-appear-delay .3)))

#+end_src

** Org Agenda
:PROPERTIES:
:ID:       17b27360-33d4-4ab3-a99e-aae28df32594
:END:
*** Files
:PROPERTIES:
:ID:       a06b19ba-ada9-478f-87b3-1562ba7c7950
:END:

Check computer ID before setting org agenda


#+begin_src emacs-lisp
  (setq org-agenda-files (list
      (concat ads/personal-dir-org "dates.org")
      (concat ads/personal-dir-org "inbox.org")
      ;(concat ads/personal-dir-org "conf-tasks.org")
  ))

  (if (string= ads/computer-id "work")
      (add-to-list 'org-agenda-files
	  (concat ads/user-dir-org "work.org")))

  (if (string= ads/computer-id "personal")
      (progn
	  (add-to-list 'org-agenda-files
		(concat ads/personal-dir-org "habits.org"))
	  (add-to-list 'org-agenda-files
		(concat ads/personal-dir-org "personal.org"))))
#+end_src

*** Agenda Open
:PROPERTIES:
:ID:       3224e335-6e8a-46d7-aa9d-b8627858b7db
:END:
split window and focus down on agenda open

#+begin_src emacs-lisp
(defun ads/org-agenda-open ()
    (interactive)
    ;; (evil-window-split)
    ;; (evil-window-down 1)
    (org-agenda nil "a"))
(ads/leader-keys
      "oa"'(ads/org-agenda-open :wk "org-agenda"))
#+end_src

*** Agenda Quit
:PROPERTIES:
:ID:       9216c1ef-bc96-45e9-8c98-c66f5785ad9d
:END:
    Close window on quitting agenda

#+begin_src emacs-lisp
(defun ads/org-agenda-quit ()
    (interactive)
    (org-agenda-quit)
    (delete-window))
(evil-define-key 'motion org-agenda-mode-map
    (kbd "q") 'ads/org-agenda-quit)
#+end_src

*** Agenda interaction
:PROPERTIES:
:ID:       1cec67b3-924c-428b-903d-65c52312f965
:END:
 Don' move windows and set org span to 1 day

 #+begin_src emacs-lisp
   (setq org-agenda-window-setup 'current-window)
   (setq org-agenda-span 1)
   (setq org-agenda-restore-windows-after-quit t)
   (setq org-agenda-persistent-filter t)
 #+end_src

*** Agenda Scheduled Leaders
:PROPERTIES:
:ID:       2c830185-8ad2-4f05-a789-d898dd84e4d7
:END:
Formatting for scheduled __ : if today otherwise ## :
#+begin_src emacs-lisp
(setq org-agenda-scheduled-leaders '("__ :" "%02d :"))
#+end_src

** Org Prettify
:PROPERTIES:
:ID:       04a30e63-6cb3-4861-8ce0-a1958413bf79
:END:

#+begin_src emacs-lisp
(defun ads/org-prettify-symbols-alist ()
  ;; I'm not happy with how these look, I'll have to figure out somethings at a future date
  ;; (push '("[ ]" . "☐" ) prettify-symbols-alist)
  ;; (push '("[X]" . "☑" ) prettify-symbols-alist)
  ;; (push '("[-]" . "❍" ) prettify-symbols-alist)
  (push '("#+BEGIN_QUOTE" . "“") prettify-symbols-alist)
  (push '("#+END_QUOTE" . "”") prettify-symbols-alist)
  (push '("#+begin_quote" . "“") prettify-symbols-alist)
  (push '("#+end_quote" . "”") prettify-symbols-alist)
  (push '("#+BEGIN_SRC" . "«") prettify-symbols-alist)
  (push '("#+END_SRC" . "»") prettify-symbols-alist)
  (push '("#+begin_src" . "«") prettify-symbols-alist)
  (push '("#+end_src" . "»") prettify-symbols-alist)
  (push '("#+options:" . "⌥") prettify-symbols-alist)
  (push '("#+RESULTS:" . "🠶") prettify-symbols-alist)
  (push '(":PROPERTIES:" ."⚙" ) prettify-symbols-alist)
  (push '("emacs-lisp" ."ε" ) prettify-symbols-alist)
  (prettify-symbols-mode))
(add-hook 'org-mode-hook 'ads/org-prettify-symbols-alist)

#+end_src

** Org Diary File
:PROPERTIES:
:ID:       77ec79c8-7f44-4d04-a88c-1e142517346a
:END:
 #+begin_src emacs-lisp
 (setq diary-file (concat ads/user-dir-org "diary.org"))
 #+end_src

** Org Capture
:PROPERTIES:
:ID:       68e627a6-5f2b-47ce-9560-96e3a36587b3
:END:

*** Inbox
:PROPERTIES:
:ID:       ef8e2515-3d71-468e-8858-0ffb57818f7c
:END:
    #+begin_src emacs-lisp
(setq  org-capture-templates
   (list  '( "c" "Task" entry
	(file+headline (lambda () (concat ads/personal-dir-org "inbox.org"))"Inbox")
 "* TODO %^{Task}
 SCHEDULED: %t
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 %i
 :END:
 %?\n
 "
	:kill-buffer t)))
    #+end_src

*** Work
:PROPERTIES:
:ID:       04221506-2013-4e86-8b71-cf5cc5e3cb5f
:END:

    #+begin_src emacs-lisp
(if (string= ads/computer-id "work")
(add-to-list  'org-capture-templates
    '("w" "Work Task" entry
	 (file+headline (lambda () (concat ads/user-dir-org "work.org"))"Tasks")
 "* TODO %^{Work Task}
 SCHEDULED: %t
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 %i
 :END:
 %?\n
 "
   :kill-buffer t)
))
    #+end_src


*** Personal
:PROPERTIES:
:ID:       8557ae23-d7a1-4ba1-b615-4ea1cd48d01f
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("p" "Personal Task" entry
	 (file+headline (lambda () (concat ads/personal-dir-org "personal.org"))"Tasks")
 "* TODO %^{Personal Task}
 SCHEDULED: %t
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 %i
 :END:
 %?\n
 "
   :kill-buffer t)
)
    #+end_src

*** Quick Inbox
:PROPERTIES:
:ID:       8837a3cc-d913-4fe0-8711-7b9a199189ef
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("i" "Quick Inbox" entry
	 (file+headline (lambda () (concat ads/personal-dir-org "inbox.org"))"Inbox")
 "* TODO %^{Task to inbox}
 SCHEDULED: %t\n
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 %i
 :END:
 "
   :immediate-finish t
   :kill-buffer t)
)
    #+end_src

**** Quick Capture
:PROPERTIES:
:ID:       62230ea9-b8d5-4068-8d27-da2e46cdc74c
:END:
  Quickly capture something to inbox with leader C-c

  #+begin_src emacs-lisp
  (ads/leader-keys
      "c" '(lambda () (interactive) (org-capture nil "i") :wk "Capture to Inbox"))
  #+end_src


*** Clipboard Link
:PROPERTIES:
:ID:       dabbdfbe-663c-444e-adac-d4ee65e18a4e
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("k" "Clipboard Link to Inbox" entry
	 (file+headline (lambda () (concat ads/personal-dir-org "inbox.org"))"Inbox")
 "* TODO %(org-cliplink-capture)
 SCHEDULED: %t\n
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 %i
 :END:
 "
   :immediate-finish t
   :kill-buffer t)
)
    #+end_src

*** Project
:PROPERTIES:
:ID:       9041890b-3d1c-4fb6-9741-b2dcc6fe0486
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("P" "Project" entry
	 (file+headline (lambda () (concat ads/personal-dir-org "personal.org"))"Projects")
 "* TODO %^{Project Name}
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :REF:\t%a
 :Effort: \t%^{effort|1:00|2:00|4:00|8:00|16:00}
 :Cost-est:\t%^{Cost estimate}
 %i
 :END:
 %?\n
   "
   :kill-buffer t)
)
    #+end_src

*** Book
:PROPERTIES:
:ID:       68c8db3a-dc71-4e4e-a863-9f6f560b14f7
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("B" "Book" entry
	 (file+headline (lambda () (concat ads/personal-dir-org "books.org"))"Endless Pile")
 "* PILE %^{Book Title}
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :AUTHOR:
 :RECCOMMENDER:
 :END:
 %?\n
   "
   :kill-buffer t)
)
    #+end_src

*** Quote
:PROPERTIES:
:ID:       87068617-9a5f-47fc-a86e-7827282ef5fa
:END:

    #+begin_src emacs-lisp
(add-to-list  'org-capture-templates
    '("t" "Quote" entry
	 (file (lambda () (concat ads/personal-dir-org "quotes.org")))
 "* %^{Quote or Note}
 :PROPERTIES:
 :ID:     \t%(org-id-new)
 :CREATED:\t%U
 :SOURCE: %^{Source}
 :REF: \t%a
 :END:
 %?\n
   "
   :kill-buffer t))
    #+end_src

*** Log to archive.org
:PROPERTIES:
:ID:       f6bc56e3-a90b-4a7f-97d9-919af0944f76
:END:
Quickly log note to archive under datetree, good CYA if you need it, also nice for seeing progress during a workday
#+begin_src emacs-lisp

(add-to-list  'org-capture-templates
    '("l" "Log to Archive" entry
	 (file+datetree (lambda () (concat ads/user-dir-org "archive.org")) )
 "* %U
:PROPERTIES:
:ID:\t%(org-id-new)
:REF:\t%a
:FILE:\t%f
:TASK_CLOCK:\t%K
:END:
 \n%?\n
 "
   :kill-buffer t)
)

(defun ads/log-to-archive ()
    (interactive)
    (org-capture nil "l")
    (evil-insert-state)
    )

(ads/leader-keys
    "l" '(ads/log-to-archive :wk "Log to Archive"))
#+end_src


*** Log to archive.org with subject
:PROPERTIES:
:ID:       e3a42354-2e98-49cd-a40c-293bcb403ebf
:END:
Quickly log note to archive under datetree, header only timesetamp, intended to just be a quck status of what I'm working on
#+begin_src emacs-lisp

(add-to-list  'org-capture-templates
    '("L" "Log to Archive Subject" entry
	 (file+datetree (lambda () (concat ads/user-dir-org "archive.org")) )
 "* %^{Subject} %U
:PROPERTIES:
:ID:\t%(org-id-new)
:REF:\t%a
:FILE:\t%f
:TASK_CLOCK:\t%K
:END:
 \n%?\n
 "
   :kill-buffer t)
)

(defun ads/log-to-archive-subject ()
    (interactive)
    (org-capture nil "L")
    (evil-insert-state)
    )

(ads/leader-keys
    "L" '(ads/log-to-archive-subject :wk "Log to Archive"))
#+end_src

** Org Bullets
:PROPERTIES:
:ID:       45da6f97-0e96-4878-b715-6e80e4ad03c3
:END:

   #+begin_src emacs-lisp
   (use-package org-bullets
	  :after org
	  :hook (org-mode . org-bullets-mode)
	 )
   #+end_src

** Org Visual fill
:PROPERTIES:
:ID:       44644d98-931f-40a9-a16a-6fdc72e92290
:END:

   #+begin_src emacs-lisp

(defun ads/org-mode-visual-fill ()
  (setq visual-fill-column-width 90
	visual-fill-column-center-text t
	visual-fill-column-enable-sensible-window-split t
	;; header-line-format ""
	)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . ads/org-mode-visual-fill))

   #+end_src

** Babel Languages
:PROPERTIES:
:ID:       c407e836-27d5-474a-9737-4bf6ac47ef08
:END:

   #+begin_src emacs-lisp
   (with-eval-after-load 'org
     (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t))))

    (setq org-confirm-babel-evaluate nil)

   #+end_src

** Org Block Structure Templates
:PROPERTIES:
:ID:       579dd98a-1c2c-4431-9772-e3be34ce95ba
:END:
   #+begin_src emacs-lisp
 (with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell\n"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp\n"))
  (add-to-list 'org-structure-template-alist '("py" . "src python\n"))
  (add-to-list 'org-structure-template-alist '("ht" . "src html\n"))
  (add-to-list 'org-structure-template-alist '("html" . "src html\n"))
  (add-to-list 'org-structure-template-alist '("css" . "src css\n"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C\n"))
  (add-to-list 'org-structure-template-alist '("cp" . "src C++\n"))
  (add-to-list 'org-structure-template-alist '("js" . "src js\n"))
  (add-to-list 'org-structure-template-alist '("jj" . "src java\n"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql\n"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql\n"))
  )
   #+end_src


** Easier Org edit special
:PROPERTIES:
:ID:       a290b90e-1883-4e65-a64b-9ceb90f25b39
:END:
Org edit special is a nice way to edit a code block in its own buffer which allows for company completion
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-'") 'org-edit-special)
#+end_src

#+RESULTS:
: org-edit-special
** Evil Org
:PROPERTIES:
:ID:       82b389c0-63cc-45e2-914b-3d8e9184d030
:END:
Maybe this will be better somewhere else but it works here for now
[[https://github.com/Somelauw/evil-org-mode/tree/80ef38fb378541937f6ddfe836809e76eda1e355][Evil Org Github]]

#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Org Cliplink
:PROPERTIES:
:ID:       30ec75d7-5ba2-4178-931b-8922b752d648
:END:
[[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
   #+begin_src emacs-lisp
(use-package org-cliplink)
(ads/leader-keys
    "ok" '(org-cliplink :wk "org-cliplink")
)

   #+end_src

** Replace Link
:PROPERTIES:
:ID:       cdd6dadb-ef06-4592-a037-e3cbe3988499
:END:

#+begin_src emacs-lisp

(defun org-replace-link-by-link-description ()
    "Replace an org link by its description or if empty its address"
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description
               (if (match-end 2)
                   (org-match-string-no-properties 2)
                 (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description)))))

#+end_src

** Insert Screenshot
:PROPERTIES:
:ID:       b0330f2c-d38c-4a6c-a493-55553bc98641
:END:

Most code taken from: [[https://www.sastibe.de/2018/11/take-screenshots-straight-into-org-files-in-emacs-on-win10/][Take Screenshots Straight into Org Files in Emacs on Win10]]

at some point it may be worth taking a look at integrating this with
[[https://github.com/abo-abo/org-download][org-download]]

Set up my default save directory: (it may be worth adding an alt one for things that shouldn't be up on github)
#+begin_src emacs-lisp
(setq ads/user-dir-org-screenshot
    (concat ads/user-dir-org "images/screenshot/"))
#+end_src

Steps
1. set file save location to org-screenshot-filename
2. shell command to the snipping tool
3. save clipboard image as org-screenshot-filename
4. insert image inline with org

#+begin_src emacs-lisp
(defun ads/org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)

  (setq org--screenshot-filename
        (concat
         (make-temp-name
          (concat ads/user-dir-org-screenshot
		    (file-relative-name buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))

  (shell-command "snippingtool /clip")


  (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('" org--screenshot-filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))

  (insert (concat "[[file:" org--screenshot-filename "]]"))
  (org-display-inline-images))


(ads/leader-keys
    "os" '(ads/org-screenshot :wk "org-screenshot")
)

#+end_src

** Insert Image from clipboard
:PROPERTIES:
:ID:       feff49dd-2bd1-455f-8115-3d538b4afc51
:END:

Same thing as the insert screenshot but works faster and can use with Win-S from clipboard

#+begin_src emacs-lisp
(defun ads/org-clip-image ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq temp-image-filename
	  (make-temp-file
	   (concat
	    (file-relative-name buffer-file-name)
	    "_"
	    (format-time-string "%Y%m%d_%H%M%S_"))
	   nil
	   ".png"))
    (shell-command (concat
		    "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;"
		    "if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('"
		    temp-image-filename
		    "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
    (org-attach-attach
     temp-image-filename
     nil
     `mv)
    (insert (concat
	     "[[file:"
	     (org-attach-dir)
	     "/"
	     (file-name-nondirectory temp-image-filename)
	     "]]"))
    (org-display-inline-images))


(ads/leader-keys
    "s" '(ads/org-clip-image :wk "org-insert-clipboard-image")
)
#+end_src

** Org Find File
:PROPERTIES:
:ID:       149ef038-9043-408f-8ed3-314f617dd41d
:END:
Counsel find file in my org directory

#+begin_src emacs-lisp
(defun ads/org-find-file ()
    "Find file in ads/user-dir-org"
    (interactive)
    (counsel-find-file ads/user-dir-org)
)
(ads/leader-keys "f" '(ads/org-find-file :wk "Org Find File"))
#+end_src

** Org Normal on C-c C-c
:PROPERTIES:
:ID:       cc2372e6-b60c-4c47-b018-806d74169aa8
:END:
Return to normal state after C-c C-c

#+begin_src emacs-lisp
(add-hook 'org-ctrl-c-ctrl-c-hook 'evil-normal-state)
#+end_src
** Next item in checkilist on C-c C-c
:PROPERTIES:
:ID:       df33ffb8-d8c2-49dc-a5c9-8e75242ed545
:END:
#+begin_src emacs-lisp
(defun ads/org-checkbox-next ()
  (interactive)
    (when (org-at-item-checkbox-p)
      (org-toggle-checkbox)
      (org-next-item)
      (evil-normal-state))
  )

;; (add-hook 'org-ctrl-c-ctrl-c-hook 'ads/org-checkbox-next)
#+end_src

** Async Tangling Config
:PROPERTIES:
:ID:       8c2ecbd5-e3ab-4ab1-9fbd-afa756b0186f
:END:
I don't want to have to wait after saving a file to fontinue working

#+begin_src emacs-lisp
(use-package async
  :config
  (defun ads/init-hook ()
    "If the current buffer is 'readme.org' the code-blocks
are tangled."
    (when (string= buffer-file-truename ads/user-dir-readme)
      (async-start
       `(lambda ()
          (require 'org)
	  (let ((org-confirm-babel-evaluate nil)))
          (org-babel-tangle-file ,ads/user-dir-readme))
       (lambda (result)
         (message "Tangled file compiled.")))))
  (add-hook 'after-save-hook 'ads/init-hook))

;; (use-package dired-async
;;   :after async
;;   :config
;;   (dired-async-mode 1))
#+end_src

** New org note
:PROPERTIES:
:ID:       45f7ea74-ad43-412a-bb9f-26be256468f6
:END:
Quick fn to define a new org note

#+begin_src emacs-lisp
  (defun ads/new-org-note ()
    (interactive)
    (setq input (read-string "Enter new Filename:\t"))
    ;; (setq input "test file NaMe")
    (setq input (replace-regexp-in-string "\s" "-" input))
    (setq input (downcase input))
    (setq input (concat ads/user-dir-org input ".org"))
    (find-file input)
    (evil-insert-state)
    )
  (ads/leader-keys
    "on" '(ads/new-org-note :wk "new-org-note")
  )
#+end_src

** Open Scratch.org
:PROPERTIES:
:ID:       7e1e64e3-0008-41ce-acb3-996197f4a7ac
:END:
~leader C-s~ Open and go to scratch.org

#+begin_src emacs-lisp
(ads/leader-keys
    "C-s" '(lambda () (interactive) (
    find-file (concat ads/user-dir-org "scratch.org"))
    :wk "ORG Config")
)
#+end_src

* Development
:PROPERTIES:
:ID:       ebf36f61-23a4-4e94-924d-e762fc41edc5
:END:
** Languages
:PROPERTIES:
:ID:       3da3b099-ebd8-407c-b50c-bec8941f22e9
:END:
** Auto Mode alist
:PROPERTIES:
:ID:       4568bcdd-6bd4-4527-b116-03ed20c1d2c9
:END:

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.keymap\\'" . c-or-c++-mode))
#+end_src

** Projectile
:PROPERTIES:
:ID:       a6b932af-21aa-442d-aeb7-92d9ebce11c3
:END:

#+begin_src emacs-lisp
(use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:custom ((projectile-completion-system 'ivy))
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "c:/Users/Adrian/Documents/GitHub/")
	;; Specify folder where you keep your coding projects
	    (setq projectile-project-search-path '("c:/Users/Adrian/Documents/GitHub/")))
	(setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
	:after projectile
	:config (counsel-projectile-mode))

#+end_src

** Magit
:PROPERTIES:
:ID:       2c610a98-2a7b-493b-a6dd-e65385d54cc5
:END:

Painful and super slow on windows, a large reason why I often use the <leader> git commands defined later

#+begin_src emacs-lisp

(use-package magit
  :commands magit-status
  ;; display the diff from git in the same window (may be worth trying different options as well
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))


;(use-package evil-magit
;   :after magit)
(global-set-key (kbd "C-c g") 'magit-file-dispatch)
(global-set-key (kbd "C-c C-g") 'magit-file-dispatch)
(global-set-key (kbd "C-x C-g") 'magit-status)
#+end_src
*** Magit Diff Paths
:PROPERTIES:
:ID:       f3cc7764-a14d-47b6-ab9d-28bf38489d44
:END:
Might be worth submitting a PR for this, seems like it would be a helpful thing to have
#+begin_src emacs-lisp
(defun magit-diff-paths-buffer-file (a)
  "Show changes between buffer file and another file on disk"
  (interactive (list (read-file-name "File to compare" nil nil t)
		     ))
  (message a)
  (magit-diff-setup-buffer nil "--no-index"
                           nil (list (magit-convert-filename-for-git
                                      (expand-file-name a))
                                     (magit-convert-filename-for-git
                                      (expand-file-name buffer-file-name))))
    )

#+end_src


** Shell Git Commands
:PROPERTIES:
:ID:       f7903f70-8796-4d48-aae3-4ff36a14b161
:END:

Windows commands for git becaue magit is almost unusably slow due to windows issues

*** Git stage
:PROPERTIES:
:ID:       963747b4-5501-42d0-8cec-ef5cfd040460
:END:

#+begin_src emacs-lisp
(defun ads/git-stage ()
  (interactive)
  (save-buffer)
  (shell-command (concat "git stage " buffer-file-name) )
  (message
    (concat "Staging file : " buffer-file-name)))
(ads/leader-keys
    "gs"'(ads/git-stage :wk "git stage file"))

#+end_src

*** Git stage all
:PROPERTIES:
:ID:       8bbb723b-59f4-4e99-96f5-1fb169ea50e0
:END:


#+begin_src emacs-lisp
(defun ads/git-stage-all ()
  (interactive)
  (shell-command "git stage --all")
  (message
    (concat "Staging all changed files in: " (file-name-directory buffer-file-name))))
(ads/leader-keys
    "gS"'(ads/git-stage-all :wk "git stage all"))

#+end_src

*** Git commit
:PROPERTIES:
:ID:       4c5499fe-3c97-4a6a-bf80-848d72eed53d
:END:

#+begin_src emacs-lisp
(defun ads/git-commit-file ()
  (interactive)
  (save-buffer)
  (shell-command (concat "git stage " buffer-file-name) )
  (magit-diff-staged)
  (shell-command (concat "git commit -m \"" (read-string "Commit Message:\t") "\""))
  (magit-mode-bury-buffer))

(ads/leader-keys
    "gk"'(ads/git-commit-file :wk "git commit"))

#+end_src

*** Git stage commit and push
:PROPERTIES:
:ID:       395fd074-493c-421e-a6a2-38342b440ce3
:END:
Useful I'm only writng code for me and I'm lazy AF and testing somewhere else..
#+begin_src emacs-lisp
(defun ads/git-stage-commit-push ()
  (interactive)
  (save-buffer)
  (shell-command (concat "git stage " buffer-file-name) )
  (magit-diff-staged)
  (shell-command (concat "git commit -m \"" (read-string "Commit Message:\t") "\""))
  ;; (message
  ;;  (concat "Pushing Upstream: " (file-name-directory buffer-file-name)))
  (async-shell-command "git push")
  (magit-mode-bury-buffer))

(ads/leader-keys
    "gl"'(ads/git-stage-commit-push :wk "git commit"))

#+end_src

*** Git commit all
:PROPERTIES:
:ID:       ab98f544-4379-49ab-af5e-c073353e7628
:END:
#+begin_src emacs-lisp
(defun ads/git-commit-all ()
  (interactive)
  (magit-diff-staged)
  (shell-command (concat "git commit -am \"" (read-string "Commit Message:\t") "\""))
  (magit-mode-bury-buffer))

(ads/leader-keys
    "gK"'(ads/git-commit-all :wk "git commit all"))

#+end_src

*** Git Push
:PROPERTIES:
:ID:       38fa7d31-4ff2-43ec-b453-72796cae0a3b
:END:
#+begin_src emacs-lisp
(defun ads/git-push ()
  (interactive)
  (message
   (concat "Pushing Upstream: " (file-name-directory buffer-file-name)))
  (async-start
   (message
    (shell-command-to-string
     (concat
      "cd "
      (file-name-directory buffer-file-name)
      " && git push ")))
   (message "done")))
(ads/leader-keys
    "gp"'(ads/git-push :wk "git push"))

#+end_src

*** Git Pull
:PROPERTIES:
:ID:       fa0ab85e-edde-4b65-b8ff-8d99ebe2d007
:END:
#+begin_src emacs-lisp
(defun ads/git-pull ()
  (interactive)
  (message
   (concat "Pulling from Upstream: " (file-name-directory buffer-file-name)))
  (async-start
   (message
    (shell-command-to-string
     (concat
      "cd "
      (file-name-directory buffer-file-name)
      " && git pull ")))
   (message "done")))
(ads/leader-keys
    "gP"'(ads/git-pull :wk "git pull"))

#+end_src

*** Git Fetch
:PROPERTIES:
:ID:       19d91f2e-8de8-4c64-8b4e-065ed50e0b21
:END:
#+begin_src emacs-lisp

(defun ads/git-fetch ()
  (interactive)
  (shell-command "git fetch --all")
  (message
    (concat "Fetching Upstream" (file-name-directory buffer-file-name))))
(ads/leader-keys
    "gf"'(ads/git-fetch :wk "git fetch"))


#+end_src


** Prettify Code
:PROPERTIES:
:ID:       c14d9424-2259-408e-ad97-6b41cd9152c7
:END:

Inspiration taken from [[https://github.com/mcraveiro/cunene/][GitHub - mcraveiro/cunene: My dot emacs]], most of this will probably go away once I update to EMACS 28 and can use ligatures
#+begin_src emacs-lisp
(defun ads/prog-mode-configure-prettify-symbols-alist ()
  "Set prettify symbols alist."
  (setq prettify-symbols-alist '(("lambda" . "λ")
                                 ("->" . "→")
                                 ("->>" . "↠")
                                 ("=>" . "⇒")
                                 ("map" . "↦")
                                 ("/=" . "≠")
                                 ("!=" . "≠")
                                 ("==" . "≡")
                                 ("<=" . "≤")
                                 (">=" . "≥")
                                 ("=<<" . "=≪")
                                 (">>=" . "≫=")
                                 ("<=<" . "↢")
                                 (">=>" . "↣")
                                 ("&&" . "∧")
                                 ("||" . "∨")
                                 ("not" . "¬")))
  (prettify-symbols-mode))

(add-hook 'prog-mode-hook 'ads/prog-mode-configure-prettify-symbols-alist)


#+end_src

#+RESULTS:

** Company mode
:PROPERTIES:
:ID:       fd1e14f3-8601-4004-ae7d-406c0bfa44cb
:END:
Completion system

# #+begin_src emacs-lisp
(use-package company
  :bind (("C-." . company-complete))
  :custom
  (company-idle-delay 0) ;; I always want completion, give it to me asap
  (company-dabbrev-downcase nil "Don't downcase returned candidates.")
  (company-show-numbers t "Numbers are helpful.")
  (company-tooltip-limit 10 "The more the merrier.")
  :config
  ;; (global-company-mode) ;; We want completion everywhere
  ;; (setq company-global-modes '(not org-mode))
  ;; use numbers 0-9 to select company completion candidates
  (add-hook 'prog-mode-hook 'company-mode)
  (let ((map company-active-map))
    (mapc (lambda (x) (define-key map (format "%d" x)
		   `(lambda () (interactive) (company-complete-number ,x))))
          (number-sequence 0 9))))

#+end_src

#+RESULTS:
** Flycheck
:PROPERTIES:
:ID:       e5809ac7-ee74-4f36-a0a7-23fa0aec5ded
:END:
Flycheck is the newer version of flymake and is needed to make lsp-mode not freak out.
# #+begin_src emacs-lisp
(use-package flycheck
  :config

  (setq flycheck-global-modes '(not org-mode))
  (add-hook 'prog-mode-hook 'flycheck-mode) ;; always lint my code
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  )
#+end_src

** LSP Mode
:PROPERTIES:
:ID:       9a30a422-6935-455a-bef0-2df67456057f
:END:
Package for interacting with language servers
# #+begin_src emacs-lisp

(use-package lsp-mode
  :commands lsp
  :config
  (setq lsp-prefer-flymake nil ;; Flymake is outdated
        lsp-headerline-breadcrumb-mode nil))
;; I don't like the symbols on the header a-la-vscode, remove this if you like them.
#+end_src


*** Git Restore file
:PROPERTIES:
:ID:       8522eb91-a6ea-446a-8f71-8ba7c1ddfb97
:END:
I did an oopsies restore file to last commit

#+begin_src emacs-lisp
(defun ads/git-restore-file ()
  (interactive)
  (shell-command (concat "git restore " buffer-file-name) )
  (message
    (concat "Restoring file: " buffer-file-name))
  (revert-buffer))
(ads/leader-keys
    "gr"'(ads/git-restore-file :wk "git restore file"))

#+end_src
* Anki
:PROPERTIES:
:ID:       d282f285-e32d-4396-899d-cbc0089dc754
:END:

#+begin_src emacs-lisp
(use-package anki-connect)
(use-package anki-editor
  :after org
  ;; :bind (:map org-mode-map
  ;;             ("<f12>" . anki-editor-cloze-region-auto-incr)
  ;;             ("<f11>" . anki-editor-cloze-region-dont-incr)
  ;;             ("<f10>" . anki-editor-reset-cloze-number)
  ;;             ("<f9>"  . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t)

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
#+end_src
* File Management
:PROPERTIES:
:ID:       521c9aec-b628-4b0e-8742-f886747a9775
:END:
** Dired
:PROPERTIES:
:ID:       85cd3f56-c224-4917-bdf7-5c4aba24238d
:END:

#+begin_src emacs-lisp
(use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first"))
      :hook (dired-mode . dired-hide-details-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
	"h" 'dired-single-up-directory
	"l" 'dired-single-buffer)
      (evil-global-set-key 'normal (kbd "C-x C-d") 'dired)

       (setq delete-by-moving-to-trash t)
       (setq-default dired-hide-details-mode t)
       (setq dired-kill-when-opening-new-dired-buffer t))

(use-package dired-single
      :commands (dired dired-jump))

(use-package dired-git-info
      :ensure t
      ;:hook (dired-mode . (local-set-key ")" 'dired-git-info-mode))
      :bind (:map dired-mode-map (")" . dired-git-info-mode)))

(use-package diredfl
    :ensure t
    :config
    (diredfl-global-mode 1))
  ;(use-package dired-open
  ;    :commands (dired dired-jump)
  ;    :config
  ;    ;; Doesn't work as expected!
  ;    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  ;    (setq dired-open-extensions '(("pdf" . "feh")
				   ;; ("mkv" . "mpv"))))

#+end_src
** Counsel Find File External Extensions
:PROPERTIES:
:ID:       5c8dd674-a667-4dcc-921b-ee7f564c3cdc
:END:
When using counsel-find-file tries to open a document if the extension is in this list open using the external program

#+begin_src emacs-lisp

(setq counsel-find-file-extern-extensions
        '("xlsx"
          "xls"
          "mkv"
          "mp4"
          "pdf"
          "doc"
          "docx"
          "ppt"
          "pptx"
          "wmv"
          "mp3"))

#+end_src


** UTF-8
:PROPERTIES:
:ID:       aa91c89c-73fa-4afb-acaa-03068030d7e3
:END:
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC


** Treemacs
:PROPERTIES:
:ID:       a1aa630c-24f4-48a5-a9d5-22d0ae0570d0
:END:

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  ;; :init

  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-filewatch-mode             t  )
    (treemacs-fringe-indicator-mode      t  )

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  (define-key treemacs-mode-map (kbd "C-c C-p C-a") 'treemacs-add-project-to-workspace)
  (define-key treemacs-mode-map (kbd "C-c C-p C-d") 'treemacs-remove-project-from-workspace)
  (define-key treemacs-mode-map (kbd "C-SPC C-t") 'treemacs-quit)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

#+end_src
*** Treemacs Evil
:PROPERTIES:
:ID:       f584e52f-52ff-4d60-a4bf-ad5d9c9f671b
:END:
#+begin_src emacs-lisp
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)
#+end_src
*** Treemacs Projectile
:PROPERTIES:
:ID:       9c9034f2-3cda-4932-ade5-91a25fac0d4f
:END:
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+end_src
*** Treemacs Dired
:PROPERTIES:
:ID:       6f3f2536-c67f-4c28-bc26-429b81907f58
:END:
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+end_src

*** Treemacs magit
:PROPERTIES:
:ID:       f2123174-2150-4221-b83f-350da0dd4635
:END:
#+begin_src emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+end_src

*** Treemacs Persp
:PROPERTIES:
:ID:       8b2d91e8-6fdb-4e4d-b977-f4bbc2ac21c9
:END:
#+begin_src emacs-lisp
(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t

  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

*** LSP Treemacs
:PROPERTIES:
:ID:       e1264771-acf9-47ad-92d8-ca917fe7d43f
:END:
Currently unused
# #+begin_src emacs-lisp
# (use-package lsp-treemacs
#   :commands lsp-treemacs-errors-list
#   :config
#   (lsp-metals-treeview-enable t)
#   (setq lsp-metals-treeview-show-when-views-received t))
# #+end_src

*** Treemacs Keybindings
:PROPERTIES:
:ID:       b54889f6-8e3a-4c3b-9320-f7c14efd0c9a
:END:

#+begin_src emacs-lisp
(ads/leader-keys
    "C-t" '(treemacs :wk "treemacs"))
#+end_src
*** Treemacs laptop mode
:PROPERTIES:
:ID:       3cc9b81b-2ea7-4c49-994a-d641b5a5b4a7
:END:
change treemacs settings to be easier to use on a small latop monitor
#+begin_src emacs-lisp
(defun ads/treemacs-laptop-mode ()
  (interactive)
  (setq treemacs-indentation 1)
  (setq treemacs-width 25))
#+end_src
* Load Computer specific config files
:PROPERTIES:
:ID:       8a057818-c467-4db1-b364-10d6812c293a
:END:
** Windows
:PROPERTIES:
:ID:       f7a31363-3650-4a18-a457-b43add41f64c
:END:
cause sometimes that's life
#+begin_src emacs-lisp
(when
  (string= system-type "windows-nt")
  (org-babel-load-file (concat ads/user-dir-emacs "windows.org")))

#+end_src
** Personal Linux
:PROPERTIES:
:ID:       310ba1e2-a249-49b4-9ca0-fa6a33eb39fc
:END:
Load my ~deimos~ config stuff
#+begin_src emacs-lisp
(when
  (string= system-name "deimos")
  (org-babel-load-file (concat ads/user-dir-emacs "linux.org"))
  (org-babel-load-file (concat ads/user-dir-org "python-development-setup.org")
))
#+end_src

** Work
:PROPERTIES:
:ID:       2f377e19-7f7a-4180-86c8-e3f8ed6529fd
:END:

    ~(load-file (concat ads/user-dir-org "work.el"))~
* Disable Debug on Error
:PROPERTIES:
:ID:       8983e335-165e-428e-bf7d-3af415999cfb
:END:
   If config loaded without issue I don't need it enabled in normal usage
   I've moved this to the end of my .emacs after all config files have been loaded
   #+begin_src emacs-lisp
;; (setq debug-on-error nil)
   #+end_src

