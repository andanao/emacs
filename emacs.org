* Early Init
:PROPERTIES:
:header-args: emacs-lisp :tangle ./early-init.el :results none
:ID:       a70010ba-7c49-4804-afef-c818bc0225ec
:END:

Enable debug on error at startup to automatically get debugging with init.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(setq debug-on-error t)
(add-hook 'after-init-hook '(lambda () (setq debug-on-error nil)))
(add-hook 'after-init-hook '(lambda () (find-file "c:/Users/adanaos/git/emacs-new/emacs.org")))
#+end_src
** Set git directory
:PROPERTIES:
:ID:       3190cd0f-37bc-476e-a322-dccf9af20846
:END:

The EMACS ~~~ directory is not the same on windows as it is on Linux, I keep my git directory on
windows at ~c:/users/username/git~.  Windows behaviour can sometimes be strange, and to avoid
unecessary headaches I avoid manually setting the emacs home directory.
#+begin_src emacs-lisp
(if (member system-type '(windows-nt ms-dos))
    (setq ads/git-dir (concat "c:/users/" user-login-name "/git/"))
    (setq ads/git-dir (expand-file-name "~/git/")))
#+end_src

** Garbage Collection
:PROPERTIES:
:ID:       ecc6265b-6f3e-4637-8d8c-5f91724e9db7
:END:
(lifted from [[https://github.com/progfolio/.emacs.d?tab=readme-ov-file#garbage-collection][progfolio's init]])

=gc-cons-threshold= (800 KB) and =gc-cons-percentage= (0.1) control when the Emacs garbage collector can kick in.
Temporarily turning these off during init should decrease startup time.
Resetting them afterward will ensure that normal operations don't suffer from a large GC periods.

The following is a table shows values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp :lexical t
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 1)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp :lexical t
(defun +reset-init-values ()
  (run-with-idle-timer
   1 nil
   (lambda ()
     (setq ;;file-name-handler-alist default-file-name-handler-alist
           gc-cons-percentage 0.1
           gc-cons-threshold 100000000)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

;; (with-eval-after-load 'elpaca
  ;; (add-hook 'elpaca-after-init-hook '+reset-init-values))
#+end_src

** UI Changes
:PROPERTIES:
:ID:       9c4cb38a-f09c-4e67-9b73-a58bdc8d69bc
:END:

Changes to the UI to inhibit unused elements be used should speed up start up times by a bit
#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Remove server instruction clients, on closing an emacs frame when emacs server is running
#+begin_src emacs-lisp
(setq server-client-instructions nil)
#+end_src

Implicitly resizing the Emacs frame adds to init time. Fonts larger than the system default can cause frame resizing, which adds to startup time.
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src

Silence the bell
#+begin_src emacs-lisp
(setq ring-bell-function #'ignore
      inhibit-startup-screen t)
#+end_src
** Package Usage
:PROPERTIES:
:ID:       d42c037e-17f1-44bb-a1f1-15eeece7ce47
:END:
On corporate machines I've been unable to get elpaca/straight working, for linux I plan to use the Nix [[https://github.com/nix-community/emacs-overlay][emacs-overlay]]

#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu"  . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			 ))

(setq use-package-always-ensure t)
#+end_src


** Provide Early init
:PROPERTIES:
:ID:       c919ae21-a56c-48f5-9e46-c6e32459ce46
:END:

#+begin_src emacs-lisp
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: emacs-lisp :tangle ./init.el :results none :noweb yes
:ID:       85eade92-0a0e-402a-92ab-b25354dd8a09
:END:

#+begin_src emacs-lisp
;; (set-background-color "#000000")        ;; Prevent blind white bg
(load-theme 'modus-vivendi)
;; (load-theme 'modus-operandi)

(setq
 cursor-in-non-selected-windows nil     ;; Hide the cursor in inactive windows
 large-file-warning-threshold 100000000 ;; 100Mb
 inhibit-startup-screen t               ;; I'd rather a blank slate
 help-window-select t                   ;; Focus new help windows when opened
 )

(blink-cursor-mode 0)                   ;; Prefer a still cursor
(fset 'yes-or-no-p 'y-or-n-p)           ;; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ;; Iterate through CamelCase words
(put 'downcase-region 'disabled nil)    ;; Enable downcase-region
(put 'upcase-region 'disabled nil)      ;; Enable upcase-region
(scroll-bar-mode -1)                    ;; Disable the visible scrollbar
(tool-bar-mode -1)                      ;; Disablet the toolbar
(tooltip-mode -1)                       ;; Disable tooltips
(menu-bar-mode -1)                      ;; Disable the menu bar

#+end_src
** Custom Variables
:PROPERTIES:
:ID:       ea86272e-ba14-4256-8720-812ba9a21f8f
:END:

Custom config variable setting

*** Auto tangle files
:PROPERTIES:
:ID:       cd29ca1d-9409-4477-ae77-225975cc8ed3
:END:

Automatically tangle my configuration files.  Since I have multiple ones for individual computers that I have to use which may need different configuration settings.

#+begin_src emacs-lisp :noweb yes
(setq org-babel-auto-tangle-file-list
      (list
       "c:/Users/adanaos/git/emacs-new/emacs.org"
       ))
#+end_src

#+begin_src emacs-lisp
(defun org-babel-auto-tangle-files ()
  ;; Automatically tangle files in ~org-babel-auto-tangle-file-list~ when one of them is saved
  (when (member buffer-file-name org-babel-auto-tangle-file-list)
    (org-babel-tangle-file buffer-file-name)))
#+end_src

Add hook to after save hook when on org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda () (add-hook 'after-save-hook 'org-babel-auto-tangle-files)))
#+end_src
** Theme
:PROPERTIES:
:ID:       402191ad-8c44-4671-a645-325322eecff4
:END:
This is just temporary

#+begin_src emacs-lisp
(if (string= system-type "gnu/linux")
  (setq serif "Etbb")
  (setq serif "EtBembo"))

(setq
 mono "FiraCode Nerd Font"
 sans "Cantarell")

;; Set Font sizes
(defvar default-font-size 140)
(defvar default-variable-font-size 140)

;Set line spacing
(setq line-spacing .2)

;; Set default font
(set-face-attribute 'default nil :font mono :height default-font-size)
(set-face-attribute 'fixed-pitch nil :font mono :height default-font-size)

;; Set the variable pitch fa
(set-face-attribute 'variable-pitch nil :font serif :height default-variable-font-size :weight 'regular)

(load-theme 'modus-vivendi)
#+end_src
** Packages
:PROPERTIES:
:ID:       d3911478-ab2b-442c-b962-80339f2aff80
:END:
*** general
:PROPERTIES:
:ID:       d25d57ce-fc06-4526-9707-b7ebccd9a7e6
:END:

[[https://github.com/noctuid/general.el#about][general.el]] provides a more convenient method for binding keys in emacs. I use it to set all of my key bindings

#+begin_src emacs-lisp :lexical t :noweb yes
(use-package general
  :demand t
  :config
  (general-override-mode)
  (general-auto-unbind-keys)
  <<general-config>>)
#+end_src

**** General config
:PROPERTIES:
:header-args: :noweb-ref general-config
:ID:       c3286a06-0321-49f6-8183-a37c497ddd7f
:END:

#+begin_src emacs-lisp :lexical t
(general-define-key
 :keymaps 'override
 :states '(insert normal hybrid motion visual operator emacs)
 :prefix-map '+prefix-map
 :prefix-command '+prefix-map
 :prefix "SPC"
 :global-prefix "C-SPC")

(general-create-definer ads/leader-keys
  :keymaps 'override
  :states '(insert normal hybrid motion visual operator)
  :wk-full-keys nil
  :prefix "SPC"
  :global-prefix "C-SPC")
#+end_src

#+begin_src emacs-lisp :lexical t
(ads/leader-keys
  "!"   'shell-command
  )
#+end_src
***** eval ~e~
:PROPERTIES:
:ID:       d0130836-0a5e-459d-b066-e9507c58e947
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "e" '(:ignore t :which-key "eval")
  "eb" 'eval-buffer
  "ed" 'eval-defun
  "ee" 'eval-expression
  "ep" 'pp-eval-last-sexp
  "es" 'eval-last-sexp
  )
#+end_src


***** quit ~q~
:PROPERTIES:
:ID:       982cc7d7-252b-4953-82e1-a62a2468eced
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "q" '(:ignore t :which-key "quit")
  "qQ" 'save-buffers-kill-emacs
  "qE" 'kill-emacs
  )
#+end_src

***** narrow ~n~
:PROPERTIES:
:ID:       5688c1b1-21e6-4f74-b4dd-a95cb23fcc5a
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "n" '(:ignore t :which-key "narrow")
  "nd" 'narrow-to-defun
  "np" 'narrow-to-page
  "nr" 'narrow-to-region
  "ns" 'org-narrow-to-subtree
  "ne" 'org-narrow-to-element
  "nb" 'org-narrow-to-block
  "nw" 'widen
  )
#+end_src
***** windows, buffers, frames ~f~
:PROPERTIES:
:ID:       f3e626e0-21a7-4e18-8c9a-414a56ba67e2
:END:
#+begin_src emacs-lisp
(ads/leader-keys
  "f" '(:ignore t :which-key "narrow")

  "fQ" 'delete-frame
  "fN" 'tear-off-window
  "fR" 'set-frame-name
  "fr" 'select-frame-by-name

  "f=" 'balance-windows
  "f_" 'split-window-vertically

  "fF" 'delete-window
  "fd" 'kill-current-buffer
  "fD" 'kill-buffer-and-window

  "fh" 'evil-window-left
  "fj" 'evil-window-down
  "fk" 'evil-window-up
  "fl" 'evil-window-right

  "fH" 'evil-window-move-far-left
  "fJ" 'evil-window-move-very-bottom
  "fK" 'evil-window-move-very-top
  "fL" 'evil-window-move-far-right
  )
#+end_src
***** TODO config ~c~
:PROPERTIES:
:ID:       5e426a49-7743-40e0-a9b2-132889805206
:END:

#+begin_src emacs-lisp
(ads/leader-keys
  "c" '(:ignore t :which-key "config")

  "cc" '((lambda () (interactive) (find-file "c:/Users/adanaos/git/emacs-new/emacs.org"))
	 :which-key "open config")
  "cI" '((lambda () (interactive) (load-file user-init-file))
	 :which-key "load init")
  )
#+end_src
***** TODO Toggles
:PROPERTIES:
:ID:       14e88ab3-068e-48b0-b6f7-2edfd3e02491
:END:
***** TODO Regex
:PROPERTIES:
:ID:       658c2bb2-c940-4462-a419-fa1f42c942c0
:END:
*** evil
:PROPERTIES:
:ID:       0be2adc9-9670-4f89-a088-70e65229c37a
:END:
#+begin_src emacs-lisp
(use-package evil
  ;; :demand t
  :init
  (setq evil-want-integration t
        evil-want-keybinding  nil
        evil-want-C-u-scroll  nil
        evil-want-C-i-jump    nil
        evil-want-C-w-delete  nil)
  :config
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; set back normal mouse behaviour
  (define-key evil-motion-state-map [down-mouse-1] nil)
  (add-hook 'after-save-hook 'evil-normal-state)
  (evil-mode)
  )
#+end_src

*** evil-collection
:PROPERTIES:
:ID:       33566ddf-dc6f-4d3f-9e24-4d8622b7c0f1
:END:

A collection of evil bindings not fully set in the default package

 #+begin_src emacs-lisp
(use-package evil-collection
  :after (evil)
  :init (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+end_src
*** evil-anzu
:PROPERTIES:
:ID:       17726ce4-36da-4522-8c36-d1908afc9d53
:END:
Show match counts in modeline
#+begin_src emacs-lisp
(use-package evil-anzu
  :after (evil anzu))
#+end_src
*** marginalia
:PROPERTIES:
:ID:       6dd61ba5-dc71-4883-b215-4f26d461da3e
:END:

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :demand t
  :hook (after-init . marginalia-mode))
#+end_src
*** orderless
:PROPERTIES:
:ID:       d5725e1b-f4e7-4efa-9234-4434c5ef71db
:END:

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** vertico
:PROPERTIES:
:ID:       c5d608cf-1635-4b53-9ca7-3d998922de20
:END:

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :demand t
  :hook (after-init . vertico-mode))
#+end_src

*** which-key
:PROPERTIES:
:ID:       08d7fa94-ab28-4d15-afce-157dad2a79df
:END:

which-key is is included in EMACS 30

#+begin_src emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-enable-extended-define-key t)
  :config
  (which-key-mode)
  :custom
  (which-key-side-window-location 'bottom)
  (which-key-sort-order 'which-key-key-order-alpha)
  (which-key-side-window-max-width 0.33)
  (which-key-idle-delay 0.2))
#+end_src
