* Early Init
:PROPERTIES:
:header-args: emacs-lisp :tangle ./early-init.el :results none
:ID:       a70010ba-7c49-4804-afef-c818bc0225ec
:END:

Enable debug on error at startup to automatically get debugging with init.

#+begin_src emacs-lisp
;; (setq debug-on-error t)
#+end_src
** Set git directory
:PROPERTIES:
:ID:       3190cd0f-37bc-476e-a322-dccf9af20846
:END:

The EMACS ~~~ directory is not the same on windows as it is on Linux, I keep my git directory on
windows at ~c:/users/username/git~.  Windows behaviour can sometimes be strange, and to avoid
unecessary headaches I avoid manually setting the emacs home directory.
#+begin_src emacs-lisp
(if (member system-type '(windows-nt ms-dos))
    (setq ads/git-dir (concat "c:/users/" user-login-name "/git/"))
    (setq ads/git-dir (expand-file-name "~/git/")))
#+end_src

** Garbage Collection
:PROPERTIES:
:ID:       ecc6265b-6f3e-4637-8d8c-5f91724e9db7
:END:
(lifted from [[https://github.com/progfolio/.emacs.d?tab=readme-ov-file#garbage-collection][progfolio's init]])

=gc-cons-threshold= (800 KB) and =gc-cons-percentage= (0.1) control when the Emacs garbage collector can kick in.
Temporarily turning these off during init should decrease startup time.
Resetting them afterward will ensure that normal operations don't suffer from a large GC periods.

The following is a table shows values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp :lexical t
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 1)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp :lexical t
(defun +reset-init-values ()
  (run-with-idle-timer
   1 nil
   (lambda ()
     (setq ;;file-name-handler-alist default-file-name-handler-alist
           gc-cons-percentage 0.1
           gc-cons-threshold 100000000)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

;; (with-eval-after-load 'elpaca
  ;; (add-hook 'elpaca-after-init-hook '+reset-init-values))
#+end_src

** UI Changes
:PROPERTIES:
:ID:       9c4cb38a-f09c-4e67-9b73-a58bdc8d69bc
:END:

Changes to the UI to inhibit unused elements be used should speed up start up times by a bit
#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Remove server instruction clients, on closing an emacs frame when emacs server is running
#+begin_src emacs-lisp
(setq server-client-instructions nil)
#+end_src

Implicitly resizing the Emacs frame adds to init time. Fonts larger than the system default can cause frame resizing, which adds to startup time.
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src

Silence the bell
#+begin_src emacs-lisp
(setq ring-bell-function #'ignore
      inhibit-startup-screen t)
#+end_src
** Package Usage
:PROPERTIES:
:ID:       d42c037e-17f1-44bb-a1f1-15eeece7ce47
:END:
On corporate machines I've been unable to get elpaca/straight working, for linux I plan to use the Nix [[https://github.com/nix-community/emacs-overlay][emacs-overlay]]

#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu"  . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			 ))

(setq use-package-always-ensure t)
#+end_src

** Provide Early init
:PROPERTIES:
:ID:       c919ae21-a56c-48f5-9e46-c6e32459ce46
:END:

#+begin_src emacs-lisp
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: emacs-lisp :tangle ./init.el :results none
:ID:       85eade92-0a0e-402a-92ab-b25354dd8a09
:END:

#+begin_src emacs-lisp
;; (set-background-color "#000000")        ;; Prevent blind white bg
(load-theme 'modus-vivendi)
(load-theme 'modus-operandi)

(setq
 cursor-in-non-selected-windows nil     ;; Hide the cursor in inactive windows
 large-file-warning-threshold 100000000 ;; 100Mb
 inhibit-startup-screen t               ;; I'd rather a blank slate
 help-window-select t                   ;; Focus new help windows when opened
 )

(blink-cursor-mode 0)                   ;; Prefer a still cursor
(fset 'yes-or-no-p 'y-or-n-p)           ;; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ;; Iterate through CamelCase words
(put 'downcase-region 'disabled nil)    ;; Enable downcase-region
(put 'upcase-region 'disabled nil)      ;; Enable upcase-region
(scroll-bar-mode -1)                    ;; Disable the visible scrollbar
(tool-bar-mode -1)                      ;; Disablet the toolbar
(tooltip-mode -1)                       ;; Disable tooltips
(menu-bar-mode -1)                      ;; Disable the menu bar

#+end_src
** Auto tangle files
:PROPERTIES:
:ID:       cd29ca1d-9409-4477-ae77-225975cc8ed3
:END:

Automatically tangle my configuration files.  Since I have multiple ones for individual computers that I have to use which may need different configuration settings.

#+begin_src emacs-lisp :noweb yes
(setq org-babel-auto-tangle-file-list
      (list
       "c:/Users/adanaos/git/emacs-new/emacs.org"
       ))
#+end_src

#+begin_src emacs-lisp
(defun org-babel-auto-tangle-files ()
  ;; Automatically tangle files in ~org-babel-auto-tangle-file-list~ when one of them is saved
  (when (member buffer-file-name org-babel-auto-tangle-file-list)
    (org-babel-tangle-file buffer-file-name)))
#+end_src

Add hook to after save hook when on org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda () (add-hook 'after-save-hook 'org-babel-auto-tangle-files)))
#+end_src


** Disable debug on error
:PROPERTIES:
:ID:       81b9c124-7565-4621-9d9f-bbacfdfa1ff8
:END:
#+begin_src emacs-lisp
(setq debug-on-error nil)
#+end_src

